
STM32_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800635c  0800635c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006364  08006364  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a98  200000a8  08006418  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  08006418  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128de  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d8  00000000  00000000  000329b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  00035c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235b9  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8bf  00000000  00000000  00059bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfaeb  00000000  00000000  00069478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138f63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b0  00000000  00000000  00138fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060b0 	.word	0x080060b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	080060b0 	.word	0x080060b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f002 f91a 	bl	8002800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f80c 	bl	80005e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8e2 	bl	8000798 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80005d4:	f000 f8b8 	bl	8000748 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80005d8:	f000 f888 	bl	80006ec <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  setup();
 80005dc:	f001 f9f6 	bl	80019cc <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    loop();
 80005e0:	f001 fa04 	bl	80019ec <loop>
 80005e4:	e7fc      	b.n	80005e0 <main+0x1c>
	...

080005e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 f8a8 	bl	800574c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <_Z18SystemClock_Configv+0xfc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <_Z18SystemClock_Configv+0xfc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <_Z18SystemClock_Configv+0xfc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <_Z18SystemClock_Configv+0x100>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a2d      	ldr	r2, [pc, #180]	; (80006e8 <_Z18SystemClock_Configv+0x100>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <_Z18SystemClock_Configv+0x100>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800065c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fb9c 	bl	8003db0 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf14      	ite	ne
 800067e:	2301      	movne	r3, #1
 8000680:	2300      	moveq	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000688:	f000 f8a0 	bl	80007cc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068c:	f002 fff6 	bl	800367c <HAL_PWREx_EnableOverDrive>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80006a0:	f000 f894 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f82a 	bl	800371c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf14      	ite	ne
 80006ce:	2301      	movne	r3, #1
 80006d0:	2300      	moveq	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 80006d8:	f000 f878 	bl	80007cc <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <_ZL19MX_USART2_UART_Initv+0x58>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 80006f8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000724:	f003 fde2 	bl	80042ec <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000738:	f000 f848 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000c4 	.word	0x200000c4
 8000744:	40004400 	.word	0x40004400

08000748 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <_ZL11MX_DMA_Initv+0x4c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <_ZL11MX_DMA_Initv+0x4c>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <_ZL11MX_DMA_Initv+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2010      	movs	r0, #16
 8000770:	f002 f9b7 	bl	8002ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000774:	2010      	movs	r0, #16
 8000776:	f002 f9d0 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2011      	movs	r0, #17
 8000780:	f002 f9af 	bl	8002ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000784:	2011      	movs	r0, #17
 8000786:	f002 f9c8 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <_ZL12MX_GPIO_Initv+0x30>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <_ZL12MX_GPIO_Initv+0x30>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <_ZL12MX_GPIO_Initv+0x30>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <_ZN3ros3MsgC1Ev+0x1c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	080062f8 	.word	0x080062f8

0800081c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
      data()
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffe8 	bl	80007fc <_ZN3ros3MsgC1Ev>
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3304      	adds	r3, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffcf 	bl	80007da <_ZN3ros4TimeC1Ev>
    {
    }
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	080062e0 	.word	0x080062e0

0800084c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6859      	ldr	r1, [r3, #4]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	b2ca      	uxtb	r2, r1
 8000866:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	0a19      	lsrs	r1, r3, #8
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	b2ca      	uxtb	r2, r1
 8000878:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	0c19      	lsrs	r1, r3, #16
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3302      	adds	r3, #2
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	b2ca      	uxtb	r2, r1
 800088a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	0e19      	lsrs	r1, r3, #24
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3303      	adds	r3, #3
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	4413      	add	r3, r2
 800089a:	b2ca      	uxtb	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3304      	adds	r3, #4
 80008a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6899      	ldr	r1, [r3, #8]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	b2ca      	uxtb	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	0a19      	lsrs	r1, r3, #8
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3301      	adds	r3, #1
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	b2ca      	uxtb	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	0c19      	lsrs	r1, r3, #16
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3302      	adds	r3, #2
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	0e19      	lsrs	r1, r3, #24
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3303      	adds	r3, #3
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2ca      	uxtb	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3304      	adds	r3, #4
 80008ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80008ee:	68fb      	ldr	r3, [r7, #12]
    }
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	6839      	ldr	r1, [r7, #0]
 8000922:	440b      	add	r3, r1
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	431a      	orrs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3302      	adds	r3, #2
 8000936:	6839      	ldr	r1, [r7, #0]
 8000938:	440b      	add	r3, r1
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	041b      	lsls	r3, r3, #16
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3303      	adds	r3, #3
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	440b      	add	r3, r1
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	061b      	lsls	r3, r3, #24
 8000954:	431a      	orrs	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3304      	adds	r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	6839      	ldr	r1, [r7, #0]
 8000978:	440b      	add	r3, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	431a      	orrs	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3302      	adds	r3, #2
 800098c:	6839      	ldr	r1, [r7, #0]
 800098e:	440b      	add	r3, r1
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	041b      	lsls	r3, r3, #16
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	3303      	adds	r3, #3
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	440b      	add	r3, r1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	061b      	lsls	r3, r3, #24
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3304      	adds	r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80009b6:	68fb      	ldr	r3, [r7, #12]
    }
 80009b8:	4618      	mov	r0, r3
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	080060c8 	.word	0x080060c8

080009e0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	080060d8 	.word	0x080060d8

080009fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fef8 	bl	80007fc <_ZN3ros3MsgC1Ev>
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	809a      	strh	r2, [r3, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
    {
    }
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	080062c8 	.word	0x080062c8
 8000a40:	080060fc 	.word	0x080060fc

08000a44 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	8899      	ldrh	r1, [r3, #4]
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2ca      	uxtb	r2, r1
 8000a5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b299      	uxth	r1, r3
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b2ca      	uxtb	r2, r1
 8000a72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	3302      	adds	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbc6 	bl	8000210 <strlen>
 8000a84:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	69b9      	ldr	r1, [r7, #24]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 ffd8 	bl	8001a44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	3304      	adds	r3, #4
 8000a98:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	18d0      	adds	r0, r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f004 fe42 	bl	8005730 <memcpy>
      offset += length_topic_name;
 8000aac:	69fa      	ldr	r2, [r7, #28]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fba9 	bl	8000210 <strlen>
 8000abe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	6979      	ldr	r1, [r7, #20]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 ffbb 	bl	8001a44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	18d0      	adds	r0, r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f004 fe25 	bl	8005730 <memcpy>
      offset += length_message_type;
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	4413      	add	r3, r2
 8000aec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fb8c 	bl	8000210 <strlen>
 8000af8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	6939      	ldr	r1, [r7, #16]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 ff9e 	bl	8001a44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	18d0      	adds	r0, r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f004 fe08 	bl	8005730 <memcpy>
      offset += length_md5sum;
 8000b20:	69fa      	ldr	r2, [r7, #28]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4413      	add	r3, r2
 8000b26:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000b2e:	68f9      	ldr	r1, [r7, #12]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	0a19      	lsrs	r1, r3, #8
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	0c19      	lsrs	r1, r3, #16
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3302      	adds	r3, #2
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	0e19      	lsrs	r1, r3, #24
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3303      	adds	r3, #3
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	4413      	add	r3, r2
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000b70:	69fb      	ldr	r3, [r7, #28]
    }
 8000b72:	4618      	mov	r0, r3
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b08a      	sub	sp, #40	; 0x28
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	6839      	ldr	r1, [r7, #0]
 8000ba2:	440b      	add	r3, r1
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	441a      	add	r2, r3
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 ff5a 	bl	8001a80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	4413      	add	r3, r2
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d20c      	bcs.n	8000bfc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	441a      	add	r2, r3
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6839      	ldr	r1, [r7, #0]
 8000bee:	440b      	add	r3, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bfa:	e7ec      	b.n	8000bd6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4413      	add	r3, r2
 8000c02:	3b01      	subs	r3, #1
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	441a      	add	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	441a      	add	r2, r3
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 ff27 	bl	8001a80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3304      	adds	r3, #4
 8000c36:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4413      	add	r3, r2
 8000c42:	6a3a      	ldr	r2, [r7, #32]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d20c      	bcs.n	8000c62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	441a      	add	r2, r3
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	440b      	add	r3, r1
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
 8000c60:	e7ec      	b.n	8000c3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4413      	add	r3, r2
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	441a      	add	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4413      	add	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	441a      	add	r2, r3
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fef4 	bl	8001a80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d20c      	bcs.n	8000cc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	441a      	add	r2, r3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6839      	ldr	r1, [r7, #0]
 8000cba:	440b      	add	r3, r1
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e7ec      	b.n	8000ca2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	441a      	add	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4413      	add	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	6839      	ldr	r1, [r7, #0]
 8000cf6:	440a      	add	r2, r1
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	3301      	adds	r3, #1
 8000d04:	6839      	ldr	r1, [r7, #0]
 8000d06:	440b      	add	r3, r1
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	3302      	adds	r3, #2
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	440b      	add	r3, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	3303      	adds	r3, #3
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	061b      	lsls	r3, r3, #24
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000d40:	69bb      	ldr	r3, [r7, #24]
    }
 8000d42:	4618      	mov	r0, r3
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	08006100 	.word	0x08006100

08000d68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	0800611c 	.word	0x0800611c

08000d84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fd34 	bl	80007fc <_ZN3ros3MsgC1Ev>
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	711a      	strb	r2, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000da4:	609a      	str	r2, [r3, #8]
    {
    }
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	080062b0 	.word	0x080062b0
 8000db4:	080060fc 	.word	0x080060fc

08000db8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	7912      	ldrb	r2, [r2, #4]
 8000dd0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fa17 	bl	8000210 <strlen>
 8000de2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fe29 	bl	8001a44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3304      	adds	r3, #4
 8000df6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	18d0      	adds	r0, r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f004 fc93 	bl	8005730 <memcpy>
      offset += length_msg;
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e12:	68fb      	ldr	r3, [r7, #12]
    }
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	441a      	add	r2, r3
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fe19 	bl	8001a80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	3304      	adds	r3, #4
 8000e52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d20c      	bcs.n	8000e7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	441a      	add	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	440b      	add	r3, r1
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e7ec      	b.n	8000e58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	3b01      	subs	r3, #1
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	441a      	add	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
     return offset;
 8000ea2:	693b      	ldr	r3, [r7, #16]
    }
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	08006140 	.word	0x08006140

08000ec8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	08006154 	.word	0x08006154

08000ee4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fc84 	bl	80007fc <_ZN3ros3MsgC1Ev>
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08006298 	.word	0x08006298

08000f40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6859      	ldr	r1, [r3, #4]
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	b2ca      	uxtb	r2, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	0a19      	lsrs	r1, r3, #8
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b2ca      	uxtb	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	0c19      	lsrs	r1, r3, #16
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3302      	adds	r3, #2
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2ca      	uxtb	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	0e19      	lsrs	r1, r3, #24
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	3303      	adds	r3, #3
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	3304      	adds	r3, #4
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	6a3a      	ldr	r2, [r7, #32]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d22b      	bcs.n	8000ffe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b2ca      	uxtb	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	0a19      	lsrs	r1, r3, #8
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b2ca      	uxtb	r2, r1
 8000fce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	0c19      	lsrs	r1, r3, #16
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2ca      	uxtb	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	0e19      	lsrs	r1, r3, #24
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	b2ca      	uxtb	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	e7ce      	b.n	8000f9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6919      	ldr	r1, [r3, #16]
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	b2ca      	uxtb	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	0a19      	lsrs	r1, r3, #8
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4413      	add	r3, r2
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	0c19      	lsrs	r1, r3, #16
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	3302      	adds	r3, #2
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	0e19      	lsrs	r1, r3, #24
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3303      	adds	r3, #3
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	b2ca      	uxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3304      	adds	r3, #4
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	429a      	cmp	r2, r3
 8001054:	d22b      	bcs.n	80010ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699a      	ldr	r2, [r3, #24]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001064:	68f9      	ldr	r1, [r7, #12]
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	4413      	add	r3, r2
 800106c:	b2ca      	uxtb	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	0a19      	lsrs	r1, r3, #8
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	3301      	adds	r3, #1
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	4413      	add	r3, r2
 800107c:	b2ca      	uxtb	r2, r1
 800107e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	0c19      	lsrs	r1, r3, #16
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	3302      	adds	r3, #2
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	b2ca      	uxtb	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	0e19      	lsrs	r1, r3, #24
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	3303      	adds	r3, #3
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	4413      	add	r3, r2
 800109c:	b2ca      	uxtb	r2, r1
 800109e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3304      	adds	r3, #4
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	e7ce      	b.n	800104c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69d9      	ldr	r1, [r3, #28]
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	b2ca      	uxtb	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	0a19      	lsrs	r1, r3, #8
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	0c19      	lsrs	r1, r3, #16
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3302      	adds	r3, #2
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b2ca      	uxtb	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	0e19      	lsrs	r1, r3, #24
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3303      	adds	r3, #3
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	3304      	adds	r3, #4
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	429a      	cmp	r2, r3
 8001104:	d228      	bcs.n	8001158 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f87c 	bl	8000210 <strlen>
 8001118:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	4413      	add	r3, r2
 8001120:	6979      	ldr	r1, [r7, #20]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fc8e 	bl	8001a44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3304      	adds	r3, #4
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	18d0      	adds	r0, r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	4619      	mov	r1, r3
 8001144:	f004 faf4 	bl	8005730 <memcpy>
      offset += length_stringsi;
 8001148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	3301      	adds	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	e7d1      	b.n	80010fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800115a:	4618      	mov	r0, r3
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001162:	b580      	push	{r7, lr}
 8001164:	b08e      	sub	sp, #56	; 0x38
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117c:	3301      	adds	r3, #1
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	6a3a      	ldr	r2, [r7, #32]
 8001188:	4313      	orrs	r3, r2
 800118a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118e:	3302      	adds	r3, #2
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	041b      	lsls	r3, r3, #16
 8001198:	6a3a      	ldr	r2, [r7, #32]
 800119a:	4313      	orrs	r3, r2
 800119c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	3303      	adds	r3, #3
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	061b      	lsls	r3, r3, #24
 80011aa:	6a3a      	ldr	r2, [r7, #32]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b2:	3304      	adds	r3, #4
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	6a3a      	ldr	r2, [r7, #32]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d90a      	bls.n	80011d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f004 fac6 	bl	800575c <realloc>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a3a      	ldr	r2, [r7, #32]
 80011da:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d236      	bcs.n	8001258 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	440a      	add	r2, r1
 80011f6:	7812      	ldrb	r2, [r2, #0]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001200:	3301      	adds	r3, #1
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	440b      	add	r3, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	4313      	orrs	r3, r2
 800120c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001212:	3302      	adds	r3, #2
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	440b      	add	r3, r1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001224:	3303      	adds	r3, #3
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	440b      	add	r3, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	061b      	lsls	r3, r3, #24
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	3304      	adds	r3, #4
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	3301      	adds	r3, #1
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
 8001256:	e7c3      	b.n	80011e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001264:	3301      	adds	r3, #1
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4313      	orrs	r3, r2
 8001272:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001276:	3302      	adds	r3, #2
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	4313      	orrs	r3, r2
 8001284:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001288:	3303      	adds	r3, #3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	061b      	lsls	r3, r3, #24
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	4313      	orrs	r3, r2
 8001296:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	3304      	adds	r3, #4
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d90a      	bls.n	80012be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699a      	ldr	r2, [r3, #24]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f004 fa52 	bl	800575c <realloc>
 80012b8:	4602      	mov	r2, r0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d236      	bcs.n	8001340 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	440a      	add	r2, r1
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e8:	3301      	adds	r3, #1
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	440b      	add	r3, r1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fa:	3302      	adds	r3, #2
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	440b      	add	r3, r1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	041b      	lsls	r3, r3, #16
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130c:	3303      	adds	r3, #3
 800130e:	6839      	ldr	r1, [r7, #0]
 8001310:	440b      	add	r3, r1
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	061b      	lsls	r3, r3, #24
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001322:	3304      	adds	r3, #4
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	3214      	adds	r2, #20
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	3301      	adds	r3, #1
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133e:	e7c3      	b.n	80012c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134c:	3301      	adds	r3, #1
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800135c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135e:	3302      	adds	r3, #2
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001370:	3303      	adds	r3, #3
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	061b      	lsls	r3, r3, #24
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	3304      	adds	r3, #4
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	429a      	cmp	r2, r3
 800138e:	d90a      	bls.n	80013a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f004 f9de 	bl	800575c <realloc>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d23f      	bcs.n	800143a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	441a      	add	r2, r3
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fb5a 	bl	8001a80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ce:	3304      	adds	r3, #4
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
 80013d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013de:	429a      	cmp	r2, r3
 80013e0:	d20c      	bcs.n	80013fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	441a      	add	r2, r3
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	440b      	add	r3, r1
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	3301      	adds	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	e7ec      	b.n	80013d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80013fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	3b01      	subs	r3, #1
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	3b01      	subs	r3, #1
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	441a      	add	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	3220      	adds	r2, #32
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	3301      	adds	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
 8001438:	e7ba      	b.n	80013b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800143c:	4618      	mov	r0, r3
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	08006234 	.word	0x08006234

08001460 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	08006178 	.word	0x08006178

0800147c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68d8      	ldr	r0, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6891      	ldr	r1, [r2, #8]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4798      	blx	r3
 80014c8:	4603      	mov	r3, r0
  };
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
  }
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <_ZN13STM32HardwareC1Ev+0x34>)
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	200000c4 	.word	0x200000c4

08001548 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f804 	bl	800155e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001572:	4619      	mov	r1, r3
 8001574:	f002 ff86 	bl	8004484 <HAL_UART_Receive_DMA>
    }
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffa8 	bl	80014ea <_ZN13STM32Hardware10getRdmaIndEv>
 800159a:	4603      	mov	r3, r0
 800159c:	429c      	cmp	r4, r3
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d012      	beq.n	80015d0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015b0:	1c59      	adds	r1, r3, #1
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	791b      	ldrb	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80015d0:	68fb      	ldr	r3, [r7, #12]
    }
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
	...

080015dc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d108      	bne.n	8001604 <_ZN13STM32Hardware5flushEv+0x28>
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <_ZN13STM32Hardware5flushEv+0xb8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	f083 0301 	eor.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <_ZN13STM32Hardware5flushEv+0x28>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <_ZN13STM32Hardware5flushEv+0x2a>
 8001604:	2300      	movs	r3, #0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03f      	beq.n	800168a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <_ZN13STM32Hardware5flushEv+0xb8>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800161c:	429a      	cmp	r2, r3
 800161e:	d031      	beq.n	8001684 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800162c:	429a      	cmp	r2, r3
 800162e:	d20a      	bcs.n	8001646 <_ZN13STM32Hardware5flushEv+0x6a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800163e:	b29b      	uxth	r3, r3
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	b29b      	uxth	r3, r3
 8001644:	e006      	b.n	8001654 <_ZN13STM32Hardware5flushEv+0x78>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800164c:	b29b      	uxth	r3, r3
 800164e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001652:	b29b      	uxth	r3, r3
 8001654:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001660:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4413      	add	r3, r2
 8001668:	89fa      	ldrh	r2, [r7, #14]
 800166a:	4619      	mov	r1, r3
 800166c:	f002 fe8c 	bl	8004388 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	4413      	add	r3, r2
 800167a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
      }
    }
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200001c8 	.word	0x200001c8

08001698 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
      int n = length;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ae:	bfa8      	it	ge
 80016b0:	f44f 7300 	movge.w	r3, #512	; 0x200
 80016b4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016bc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4293      	cmp	r3, r2
 80016c4:	bf28      	it	cs
 80016c6:	4613      	movcs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 f827 	bl	8005730 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d00b      	beq.n	8001716 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	18d1      	adds	r1, r2, r3
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	461a      	mov	r2, r3
 8001712:	f004 f80d 	bl	8005730 <memcpy>
      }

      flush();
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7ff ff60 	bl	80015dc <_ZN13STM32Hardware5flushEv>
    }
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	f001 f8ce 	bl	80028cc <HAL_GetTick>
 8001730:	4603      	mov	r3, r0
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
      data("")
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f858 	bl	80007fc <_ZN3ros3MsgC1Ev>
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_ZN8std_msgs6StringC1Ev+0x28>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001756:	605a      	str	r2, [r3, #4]
    {
    }
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800626c 	.word	0x0800626c
 8001768:	080060fc 	.word	0x080060fc

0800176c <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fd46 	bl	8000210 <strlen>
 8001784:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f958 	bl	8001a44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3304      	adds	r3, #4
 8001798:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	18d0      	adds	r0, r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	4619      	mov	r1, r3
 80017a8:	f003 ffc2 	bl	8005730 <memcpy>
      offset += length_data;
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
      return offset;
 80017b4:	68fb      	ldr	r3, [r7, #12]
    }
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	441a      	add	r2, r3
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f951 	bl	8001a80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	3304      	adds	r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d20c      	bcs.n	800180e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	441a      	add	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	440b      	add	r3, r1
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e7ec      	b.n	80017e8 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	3b01      	subs	r3, #1
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4413      	add	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	3b01      	subs	r3, #1
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	441a      	add	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
     return offset;
 8001832:	693b      	ldr	r3, [r7, #16]
    }
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	0800619c 	.word	0x0800619c

08001858 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	080061ac 	.word	0x080061ac

08001874 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	08006284 	.word	0x08006284

08001894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ffe8 	bl	8001874 <_ZN3ros15NodeHandleBase_C1Ev>
 80018a4:	4a36      	ldr	r2, [pc, #216]	; (8001980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fe2e 	bl	8001510 <_ZN13STM32HardwareC1Ev>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80018da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 ff33 	bl	800574c <memset>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 ff2a 	bl	800574c <memset>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80018fe:	2264      	movs	r2, #100	; 0x64
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f003 ff22 	bl	800574c <memset>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800190e:	2264      	movs	r2, #100	; 0x64
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f003 ff1a 	bl	800574c <memset>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fab8 	bl	8000ee4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	08006258 	.word	0x08006258

08001984 <HAL_UART_TxCpltCallback>:
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);

char hello[50] = "Hello world from STM32!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_TxCpltCallback+0x20>)
 800198e:	f000 f89c 	bl	8001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe21 	bl	80015dc <_ZN13STM32Hardware5flushEv>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200001cc 	.word	0x200001cc

080019a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_UART_RxCpltCallback+0x20>)
 80019b2:	f000 f88a 	bl	8001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fdd0 	bl	800155e <_ZN13STM32Hardware10reset_rbufEv>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200001cc 	.word	0x200001cc

080019cc <setup>:

void setup(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  nh.initNode();
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <setup+0x18>)
 80019d2:	f000 f886 	bl	8001ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80019d6:	4904      	ldr	r1, [pc, #16]	; (80019e8 <setup+0x1c>)
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <setup+0x18>)
 80019da:	f000 f89f 	bl	8001b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001cc 	.word	0x200001cc
 80019e8:	20000b14 	.word	0x20000b14

080019ec <loop>:

void loop(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	sprintf(hello, "Hello world from STM32! - %d", counter);
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <loop+0x40>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	490e      	ldr	r1, [pc, #56]	; (8001a30 <loop+0x44>)
 80019f8:	480e      	ldr	r0, [pc, #56]	; (8001a34 <loop+0x48>)
 80019fa:	f003 fefb 	bl	80057f4 <siprintf>
	counter++;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <loop+0x40>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <loop+0x40>)
 8001a08:	801a      	strh	r2, [r3, #0]
	str_msg.data = hello;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <loop+0x4c>)
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <loop+0x48>)
 8001a0e:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 8001a10:	4909      	ldr	r1, [pc, #36]	; (8001a38 <loop+0x4c>)
 8001a12:	480a      	ldr	r0, [pc, #40]	; (8001a3c <loop+0x50>)
 8001a14:	f7ff fd49 	bl	80014aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <loop+0x54>)
 8001a1a:	f000 f8af 	bl	8001b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(1000);
 8001a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a22:	f000 ff5f 	bl	80028e4 <HAL_Delay>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000b08 	.word	0x20000b08
 8001a30:	080061d0 	.word	0x080061d0
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000b0c 	.word	0x20000b0c
 8001a3c:	20000b14 	.word	0x20000b14
 8001a40:	200001cc 	.word	0x200001cc

08001a44 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d80d      	bhi.n	8001a74 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	fa22 f103 	lsr.w	r1, r2, r3
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e7ee      	b.n	8001a52 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d811      	bhi.n	8001abe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	440a      	add	r2, r1
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e7ea      	b.n	8001a94 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3304      	adds	r3, #4
  }
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3304      	adds	r3, #4
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fd2a 	bl	8001548 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b18      	cmp	r3, #24
 8001b2e:	dc1e      	bgt.n	8001b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d111      	bne.n	8001b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	60da      	str	r2, [r3, #12]
        return true;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e004      	b.n	8001b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e7dd      	b.n	8001b2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001b6e:	2300      	movs	r3, #0
  }
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fdcb 	bl	8001724 <_ZN13STM32Hardware4timeEv>
 8001b8e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d903      	bls.n	8001baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d009      	beq.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d903      	bls.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d014      	beq.n	8001bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fda4 	bl	8001724 <_ZN13STM32Hardware4timeEv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad2      	subs	r2, r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001be8:	429a      	cmp	r2, r3
 8001bea:	bf8c      	ite	hi
 8001bec:	2301      	movhi	r3, #1
 8001bee:	2300      	movls	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001bf6:	f06f 0301 	mvn.w	r3, #1
 8001bfa:	e194      	b.n	8001f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fcbd 	bl	8001580 <_ZN13STM32Hardware4readEv>
 8001c06:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f2c0 8174 	blt.w	8001ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	441a      	add	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d11e      	bne.n	8001c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001c30:	1c59      	adds	r1, r3, #1
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	b2d1      	uxtb	r1, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	460a      	mov	r2, r1
 8001c42:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001c4c:	1e5a      	subs	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1b4      	bne.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2208      	movs	r2, #8
 8001c62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c66:	e7af      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d128      	bne.n	8001cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2bff      	cmp	r3, #255	; 0xff
 8001c76:	d10d      	bne.n	8001c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f103 0214 	add.w	r2, r3, #20
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001c92:	e799      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fd43 	bl	8001724 <_ZN13STM32Hardware4timeEv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	bf8c      	ite	hi
 8001cac:	2301      	movhi	r3, #1
 8001cae:	2300      	movls	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d088      	beq.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001cbe:	f06f 0301 	mvn.w	r3, #1
 8001cc2:	e130      	b.n	8001f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d118      	bne.n	8001d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2bfe      	cmp	r3, #254	; 0xfe
 8001cd2:	d107      	bne.n	8001ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ce2:	e771      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f47f af68 	bne.w	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f918 	bl	8001f2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001cfe:	e763      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d113      	bne.n	8001d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001d30:	e74a      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d110      	bne.n	8001d5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	441a      	add	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d5c:	e734      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d116      	bne.n	8001d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001d6e:	425a      	negs	r2, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	bf58      	it	pl
 8001d76:	4253      	negpl	r3, r2
 8001d78:	2bff      	cmp	r3, #255	; 0xff
 8001d7a:	d107      	bne.n	8001d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d8a:	e71d      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d94:	e718      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10f      	bne.n	8001dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001dbe:	e703      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d117      	bne.n	8001dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	441a      	add	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2207      	movs	r2, #7
 8001de0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f47f aeec 	bne.w	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2208      	movs	r2, #8
 8001df4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001df8:	e6e6      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	f47f aee1 	bne.w	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001e14:	425a      	negs	r2, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	bf58      	it	pl
 8001e1c:	4253      	negpl	r3, r2
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	f47f aed2 	bne.w	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d110      	bne.n	8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f87d 	bl	8001f2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f898 	bl	8001f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e06a      	b.n	8001f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e56:	2b0a      	cmp	r3, #10
 8001e58:	d107      	bne.n	8001e6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f960 	bl	8002128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001e68:	e6ae      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d10e      	bne.n	8001e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7ff f96d 	bl	8001162 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001e90:	e69a      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e98:	2b0b      	cmp	r3, #11
 8001e9a:	d104      	bne.n	8001ea6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001ea4:	e690      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001eac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f43f ae84 	beq.w	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ec6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ed0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001eda:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4798      	blx	r3
    while (true)
 8001ef6:	e667      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001ef8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00f      	beq.n	8001f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d906      	bls.n	8001f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f809 	bl	8001f2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001f24:	2300      	movs	r3, #0
  }
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fc6e 	bl	800081c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f107 020c 	add.w	r2, r7, #12
 8001f4a:	210a      	movs	r1, #10
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
    rt_time = hardware_.time();
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fbe5 	bl	8001724 <_ZN13STM32Hardware4timeEv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001f6a:	b590      	push	{r4, r7, lr}
 8001f6c:	b08b      	sub	sp, #44	; 0x2c
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fd40 	bl	80009fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	2b18      	cmp	r3, #24
 8001f84:	dc63      	bgt.n	800204e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d056      	beq.n	8002046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3308      	adds	r3, #8
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4798      	blx	r3
 8001fe8:	4603      	mov	r3, r0
 8001fea:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	330c      	adds	r3, #12
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4608      	mov	r0, r1
 8002014:	4798      	blx	r3
 8002016:	4603      	mov	r3, r0
 8002018:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800201a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681c      	ldr	r4, [r3, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fa4c 	bl	80014d2 <_ZN3ros9Publisher15getEndpointTypeEv>
 800203a:	4601      	mov	r1, r0
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	461a      	mov	r2, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
 800204c:	e798      	b.n	8001f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	2b18      	cmp	r3, #24
 8002056:	dc5f      	bgt.n	8002118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d053      	beq.n	8002110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	b29b      	uxth	r3, r3
 8002078:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3308      	adds	r3, #8
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4608      	mov	r0, r1
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4608      	mov	r0, r1
 80020d0:	4798      	blx	r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80020d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020da:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681c      	ldr	r4, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3304      	adds	r3, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4608      	mov	r0, r1
 8002102:	4798      	blx	r3
 8002104:	4601      	mov	r1, r0
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	461a      	mov	r2, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3301      	adds	r3, #1
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	e79c      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002120:	bf00      	nop
 8002122:	372c      	adds	r7, #44	; 0x2c
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}

08002128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fb70 	bl	800081c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff faef 	bl	8001724 <_ZN13STM32Hardware4timeEv>
 8002146:	4602      	mov	r2, r0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fbcf 	bl	80008fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4915      	ldr	r1, [pc, #84]	; (80021b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002164:	fba1 1303 	umull	r1, r3, r1, r3
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002174:	fba3 0302 	umull	r0, r3, r3, r2
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800217e:	fb00 f303 	mul.w	r3, r0, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	440b      	add	r3, r1
 800218c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	3304      	adds	r3, #4
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8a6 	bl	80022e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fabf 	bl	8001724 <_ZN13STM32Hardware4timeEv>
 80021a6:	4602      	mov	r2, r0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	10624dd3 	.word	0x10624dd3
 80021bc:	000f4240 	.word	0x000f4240

080021c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b63      	cmp	r3, #99	; 0x63
 80021d0:	dd09      	ble.n	80021e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e079      	b.n	80022da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80021f2:	3207      	adds	r2, #7
 80021f4:	4611      	mov	r1, r2
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
 80021fa:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	22ff      	movs	r2, #255	; 0xff
 8002200:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	22fe      	movs	r2, #254	; 0xfe
 8002208:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	b29b      	uxth	r3, r3
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	b29b      	uxth	r3, r3
 800221e:	b2da      	uxtb	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002232:	4413      	add	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	b2da      	uxtb	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	b21b      	sxth	r3, r3
 800224e:	121b      	asrs	r3, r3, #8
 8002250:	b21b      	sxth	r3, r3
 8002252:	b2da      	uxtb	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800225e:	2305      	movs	r3, #5
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3306      	adds	r3, #6
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	429a      	cmp	r2, r3
 800226a:	dc0d      	bgt.n	8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3301      	adds	r3, #1
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e7ec      	b.n	8002262 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3307      	adds	r3, #7
 800228c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	425a      	negs	r2, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	bf58      	it	pl
 8002298:	4253      	negpl	r3, r2
 800229a:	b2da      	uxtb	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	6179      	str	r1, [r7, #20]
 80022a2:	43d2      	mvns	r2, r2
 80022a4:	b2d1      	uxtb	r1, r2
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4413      	add	r3, r2
 80022aa:	460a      	mov	r2, r1
 80022ac:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b6:	dc0a      	bgt.n	80022ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1d18      	adds	r0, r3, #4
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f7ff f9e7 	bl	8001698 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	e005      	b.n	80022da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80022ce:	4905      	ldr	r1, [pc, #20]	; (80022e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f849 	bl	8002368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	080061f0 	.word	0x080061f0

080022e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3304      	adds	r3, #4
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa14 	bl	8001724 <_ZN13STM32Hardware4timeEv>
 80022fc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4915      	ldr	r1, [pc, #84]	; (800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002306:	fba1 1303 	umull	r1, r3, r1, r3
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800231e:	fba3 0302 	umull	r0, r3, r3, r2
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002328:	fb00 f303 	mul.w	r3, r0, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	1aca      	subs	r2, r1, r3
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002338:	4413      	add	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 fa00 	bl	8002754 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	10624dd3 	.word	0x10624dd3
 8002360:	000f4240 	.word	0x000f4240
 8002364:	3b9aca00 	.word	0x3b9aca00

08002368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	2103      	movs	r1, #3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f804 	bl	8002384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	460b      	mov	r3, r1
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fcf4 	bl	8000d84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f107 0214 	add.w	r2, r7, #20
 80023ae:	2107      	movs	r1, #7
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	4798      	blx	r3
  }
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_Z41__static_initialization_and_destruction_0ii>:
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d110      	bne.n	80023ee <_Z41__static_initialization_and_destruction_0ii+0x32>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10b      	bne.n	80023ee <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 80023d6:	4808      	ldr	r0, [pc, #32]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80023d8:	f7ff fa5c 	bl	8001894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80023de:	f7ff f9ad 	bl	800173c <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 80023e2:	2300      	movs	r3, #0
 80023e4:	4a05      	ldr	r2, [pc, #20]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80023e6:	4906      	ldr	r1, [pc, #24]	; (8002400 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80023e8:	4806      	ldr	r0, [pc, #24]	; (8002404 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80023ea:	f7ff f847 	bl	800147c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200001cc 	.word	0x200001cc
 80023fc:	20000b0c 	.word	0x20000b0c
 8002400:	0800622c 	.word	0x0800622c
 8002404:	20000b14 	.word	0x20000b14

08002408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
    return configured_;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_GLOBAL__sub_I_nh>:
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0
 8002426:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff ffc6 	bl	80023bc <_Z41__static_initialization_and_destruction_0ii>
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_MspInit+0x4c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_MspInit+0x4c>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_MspInit+0x4c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_MspInit+0x4c>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a4c      	ldr	r2, [pc, #304]	; (80025d4 <HAL_UART_MspInit+0x150>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	f040 8091 	bne.w	80025ca <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_UART_MspInit+0x154>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_UART_MspInit+0x154>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
 80024b8:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_UART_MspInit+0x154>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_UART_MspInit+0x154>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a42      	ldr	r2, [pc, #264]	; (80025d8 <HAL_UART_MspInit+0x154>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_UART_MspInit+0x154>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024e0:	230c      	movs	r3, #12
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f0:	2307      	movs	r3, #7
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	4838      	ldr	r0, [pc, #224]	; (80025dc <HAL_UART_MspInit+0x158>)
 80024fc:	f000 ff2a 	bl	8003354 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002500:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002502:	4a38      	ldr	r2, [pc, #224]	; (80025e4 <HAL_UART_MspInit+0x160>)
 8002504:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002506:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002508:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800250c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800250e:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002514:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 800251c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002520:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002528:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800252e:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002530:	2200      	movs	r2, #0
 8002532:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002536:	2200      	movs	r2, #0
 8002538:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 800253c:	2200      	movs	r2, #0
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002540:	4827      	ldr	r0, [pc, #156]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002542:	f000 fb05 	bl	8002b50 <HAL_DMA_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800254c:	f7fe f93e 	bl	80007cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_UART_MspInit+0x164>)
 800255e:	4a23      	ldr	r2, [pc, #140]	; (80025ec <HAL_UART_MspInit+0x168>)
 8002560:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_UART_MspInit+0x164>)
 8002564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002568:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <HAL_UART_MspInit+0x164>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_UART_MspInit+0x164>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_UART_MspInit+0x164>)
 8002578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_UART_MspInit+0x164>)
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_UART_MspInit+0x164>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_UART_MspInit+0x164>)
 800258c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002590:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_UART_MspInit+0x164>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_UART_MspInit+0x164>)
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800259e:	4812      	ldr	r0, [pc, #72]	; (80025e8 <HAL_UART_MspInit+0x164>)
 80025a0:	f000 fad6 	bl	8002b50 <HAL_DMA_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80025aa:	f7fe f90f 	bl	80007cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_UART_MspInit+0x164>)
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_UART_MspInit+0x164>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2026      	movs	r0, #38	; 0x26
 80025c0:	f000 fa8f 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025c4:	2026      	movs	r0, #38	; 0x26
 80025c6:	f000 faa8 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	20000168 	.word	0x20000168
 80025e4:	400260a0 	.word	0x400260a0
 80025e8:	20000108 	.word	0x20000108
 80025ec:	40026088 	.word	0x40026088

080025f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <NMI_Handler+0x4>

080025f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <HardFault_Handler+0x4>

080025fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <MemManage_Handler+0x4>

08002602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <BusFault_Handler+0x4>

08002608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <UsageFault_Handler+0x4>

0800260e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800263c:	f000 f932 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <DMA1_Stream5_IRQHandler+0x10>)
 800264a:	f000 fc19 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000108 	.word	0x20000108

08002658 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <DMA1_Stream6_IRQHandler+0x10>)
 800265e:	f000 fc0f 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000168 	.word	0x20000168

0800266c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <USART2_IRQHandler+0x10>)
 8002672:	f001 ff37 	bl	80044e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200000c4 	.word	0x200000c4

08002680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
	return 1;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_kill>:

int _kill(int pid, int sig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800269a:	f003 f81f 	bl	80056dc <__errno>
 800269e:	4603      	mov	r3, r0
 80026a0:	2216      	movs	r2, #22
 80026a2:	601a      	str	r2, [r3, #0]
	return -1;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_exit>:

void _exit (int status)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ffe7 	bl	8002690 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026c2:	e7fe      	b.n	80026c2 <_exit+0x12>

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f002 fff2 	bl	80056dc <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20020000 	.word	0x20020000
 8002724:	00000400 	.word	0x00000400
 8002728:	20000b28 	.word	0x20000b28
 800272c:	20000b40 	.word	0x20000b40

08002730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0a5a      	lsrs	r2, r3, #9
 8002764:	490f      	ldr	r1, [pc, #60]	; (80027a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8002766:	fba1 1202 	umull	r1, r2, r1, r2
 800276a:	09d2      	lsrs	r2, r2, #7
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800276e:	fb01 f202 	mul.w	r2, r1, r2
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	09db      	lsrs	r3, r3, #7
 8002784:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	441a      	add	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	00044b83 	.word	0x00044b83
 80027a8:	3b9aca00 	.word	0x3b9aca00

080027ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027b2:	490e      	ldr	r1, [pc, #56]	; (80027ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c8:	4c0b      	ldr	r4, [pc, #44]	; (80027f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027d6:	f7ff ffab 	bl	8002730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027da:	f002 ff85 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027de:	f7fd fef1 	bl	80005c4 <main>
  bx  lr    
 80027e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80027f0:	08006370 	.word	0x08006370
  ldr r2, =_sbss
 80027f4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80027f8:	20000b40 	.word	0x20000b40

080027fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC_IRQHandler>
	...

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <HAL_Init+0x40>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_Init+0x40>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_Init+0x40>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f000 f94f 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	200f      	movs	r0, #15
 8002830:	f000 f808 	bl	8002844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff fdfe 	bl	8002434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00

08002844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x54>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_InitTick+0x58>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285a:	fbb3 f3f1 	udiv	r3, r3, r1
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f967 	bl	8002b36 <HAL_SYSTICK_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00e      	b.n	8002890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d80a      	bhi.n	800288e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f000 f92f 	bl	8002ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002884:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <HAL_InitTick+0x5c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000034 	.word	0x20000034
 800289c:	2000003c 	.word	0x2000003c
 80028a0:	20000038 	.word	0x20000038

080028a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x20>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_IncTick+0x24>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_IncTick+0x24>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	2000003c 	.word	0x2000003c
 80028c8:	20000b2c 	.word	0x20000b2c

080028cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_GetTick+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000b2c 	.word	0x20000b2c

080028e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff ffee 	bl	80028cc <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d005      	beq.n	800290a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_Delay+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800290a:	bf00      	nop
 800290c:	f7ff ffde 	bl	80028cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d8f7      	bhi.n	800290c <HAL_Delay+0x28>
  {
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000003c 	.word	0x2000003c

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff29 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af4:	f7ff ff3e 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff8e 	bl	8002a20 <NVIC_EncodePriority>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	bf00      	nop
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff31 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffa2 	bl	8002a88 <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff feb6 	bl	80028cc <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e099      	b.n	8002ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8c:	e00f      	b.n	8002bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8e:	f7ff fe9d 	bl	80028cc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d908      	bls.n	8002bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e078      	b.n	8002ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e8      	bne.n	8002b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_DMA_Init+0x158>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4313      	orrs	r3, r2
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0307 	bic.w	r3, r3, #7
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d117      	bne.n	8002c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb01 	bl	800325c <DMA_CheckFifoParam>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e016      	b.n	8002ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fab8 	bl	80031f0 <DMA_CalcBaseAndBitshift>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	223f      	movs	r2, #63	; 0x3f
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	f010803f 	.word	0xf010803f

08002cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Start_IT+0x26>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e040      	b.n	8002d54 <HAL_DMA_Start_IT+0xa8>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d12f      	bne.n	8002d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa4a 	bl	8003194 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	223f      	movs	r2, #63	; 0x3f
 8002d06:	409a      	lsls	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0216 	orr.w	r2, r2, #22
 8002d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e005      	b.n	8002d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d6a:	f7ff fdaf 	bl	80028cc <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2280      	movs	r2, #128	; 0x80
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e052      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0216 	bic.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_DMA_Abort+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dde:	e013      	b.n	8002e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de0:	f7ff fd74 	bl	80028cc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d90c      	bls.n	8002e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e015      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e4      	bne.n	8002de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	223f      	movs	r2, #63	; 0x3f
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d004      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00c      	b.n	8002e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_DMA_IRQHandler+0x248>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a8e      	ldr	r2, [pc, #568]	; (80030cc <HAL_DMA_IRQHandler+0x24c>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2208      	movs	r2, #8
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2208      	movs	r2, #8
 8002eda:	409a      	lsls	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2201      	movs	r2, #1
 8002f10:	409a      	lsls	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2204      	movs	r2, #4
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	2204      	movs	r2, #4
 8002f46:	409a      	lsls	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d043      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d03c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d024      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
 8002fae:	e01f      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
 8002fc0:	e016      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0208 	bic.w	r2, r2, #8
 8002fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 808f 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8087 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2220      	movs	r2, #32
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b05      	cmp	r3, #5
 8003028:	d136      	bne.n	8003098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0216 	bic.w	r2, r2, #22
 8003038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <HAL_DMA_IRQHandler+0x1da>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0208 	bic.w	r2, r2, #8
 8003068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	223f      	movs	r2, #63	; 0x3f
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d07e      	beq.n	800318c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
        }
        return;
 8003096:	e079      	b.n	800318c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d031      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
 80030c4:	e02c      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
 80030c6:	bf00      	nop
 80030c8:	20000034 	.word	0x20000034
 80030cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d023      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
 80030e0:	e01e      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	2b00      	cmp	r3, #0
 8003126:	d032      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d022      	beq.n	800317a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3301      	adds	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d307      	bcc.n	8003168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f2      	bne.n	800314c <HAL_DMA_IRQHandler+0x2cc>
 8003166:	e000      	b.n	800316a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e000      	b.n	800318e <HAL_DMA_IRQHandler+0x30e>
        return;
 800318c:	bf00      	nop
    }
  }
}
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d108      	bne.n	80031d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031d2:	e007      	b.n	80031e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	60da      	str	r2, [r3, #12]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	3b10      	subs	r3, #16
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <DMA_CalcBaseAndBitshift+0x64>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800320a:	4a13      	ldr	r2, [pc, #76]	; (8003258 <DMA_CalcBaseAndBitshift+0x68>)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d909      	bls.n	8003232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003226:	f023 0303 	bic.w	r3, r3, #3
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	659a      	str	r2, [r3, #88]	; 0x58
 8003230:	e007      	b.n	8003242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	aaaaaaab 	.word	0xaaaaaaab
 8003258:	08006320 	.word	0x08006320

0800325c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d11f      	bne.n	80032b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d856      	bhi.n	800332a <DMA_CheckFifoParam+0xce>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <DMA_CheckFifoParam+0x28>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	08003295 	.word	0x08003295
 8003288:	080032a7 	.word	0x080032a7
 800328c:	08003295 	.word	0x08003295
 8003290:	0800332b 	.word	0x0800332b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d046      	beq.n	800332e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a4:	e043      	b.n	800332e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032ae:	d140      	bne.n	8003332 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b4:	e03d      	b.n	8003332 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032be:	d121      	bne.n	8003304 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d837      	bhi.n	8003336 <DMA_CheckFifoParam+0xda>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <DMA_CheckFifoParam+0x70>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032e3 	.word	0x080032e3
 80032d4:	080032dd 	.word	0x080032dd
 80032d8:	080032f5 	.word	0x080032f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      break;
 80032e0:	e030      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d025      	beq.n	800333a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f2:	e022      	b.n	800333a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032fc:	d11f      	bne.n	800333e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003302:	e01c      	b.n	800333e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d903      	bls.n	8003312 <DMA_CheckFifoParam+0xb6>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d003      	beq.n	8003318 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003310:	e018      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
      break;
 8003316:	e015      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      break;
 8003328:	e00b      	b.n	8003342 <DMA_CheckFifoParam+0xe6>
      break;
 800332a:	bf00      	nop
 800332c:	e00a      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      break;
 800332e:	bf00      	nop
 8003330:	e008      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
 8003334:	e006      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      break;
 8003336:	bf00      	nop
 8003338:	e004      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
 800333c:	e002      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      break;   
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <DMA_CheckFifoParam+0xe8>
      break;
 8003342:	bf00      	nop
    }
  } 
  
  return status; 
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	e165      	b.n	800363c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	f040 8154 	bne.w	8003636 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d005      	beq.n	80033a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d130      	bne.n	8003408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	2203      	movs	r2, #3
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033dc:	2201      	movs	r2, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 0201 	and.w	r2, r3, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b03      	cmp	r3, #3
 8003412:	d017      	beq.n	8003444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	2203      	movs	r2, #3
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d123      	bne.n	8003498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	08da      	lsrs	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3208      	adds	r2, #8
 8003458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0203 	and.w	r2, r3, #3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80ae 	beq.w	8003636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_GPIO_Init+0x300>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a5c      	ldr	r2, [pc, #368]	; (8003654 <HAL_GPIO_Init+0x300>)
 80034e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b5a      	ldr	r3, [pc, #360]	; (8003654 <HAL_GPIO_Init+0x300>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034f6:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_GPIO_Init+0x304>)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	3302      	adds	r3, #2
 80034fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4f      	ldr	r2, [pc, #316]	; (800365c <HAL_GPIO_Init+0x308>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d025      	beq.n	800356e <HAL_GPIO_Init+0x21a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4e      	ldr	r2, [pc, #312]	; (8003660 <HAL_GPIO_Init+0x30c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <HAL_GPIO_Init+0x216>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <HAL_GPIO_Init+0x310>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d019      	beq.n	8003566 <HAL_GPIO_Init+0x212>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <HAL_GPIO_Init+0x314>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_Init+0x20e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4b      	ldr	r2, [pc, #300]	; (800366c <HAL_GPIO_Init+0x318>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00d      	beq.n	800355e <HAL_GPIO_Init+0x20a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <HAL_GPIO_Init+0x31c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0x206>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a49      	ldr	r2, [pc, #292]	; (8003674 <HAL_GPIO_Init+0x320>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_GPIO_Init+0x202>
 8003552:	2306      	movs	r3, #6
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 8003556:	2307      	movs	r3, #7
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x21c>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003580:	4935      	ldr	r1, [pc, #212]	; (8003658 <HAL_GPIO_Init+0x304>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358e:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <HAL_GPIO_Init+0x324>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b2:	4a31      	ldr	r2, [pc, #196]	; (8003678 <HAL_GPIO_Init+0x324>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b8:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <HAL_GPIO_Init+0x324>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <HAL_GPIO_Init+0x324>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_GPIO_Init+0x324>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_GPIO_Init+0x324>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_GPIO_Init+0x324>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <HAL_GPIO_Init+0x324>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae96 	bls.w	8003370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40013800 	.word	0x40013800
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400
 8003664:	40020800 	.word	0x40020800
 8003668:	40020c00 	.word	0x40020c00
 800366c:	40021000 	.word	0x40021000
 8003670:	40021400 	.word	0x40021400
 8003674:	40021800 	.word	0x40021800
 8003678:	40013c00 	.word	0x40013c00

0800367c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_PWREx_EnableOverDrive+0x90>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_PWREx_EnableOverDrive+0x90>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_PWREx_EnableOverDrive+0x90>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_PWREx_EnableOverDrive+0x94>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a8:	f7ff f910 	bl	80028cc <HAL_GetTick>
 80036ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036ae:	e009      	b.n	80036c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b0:	f7ff f90c 	bl	80028cc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036be:	d901      	bls.n	80036c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e01f      	b.n	8003704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_PWREx_EnableOverDrive+0x98>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d1ee      	bne.n	80036b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d8:	f7ff f8f8 	bl	80028cc <HAL_GetTick>
 80036dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036de:	e009      	b.n	80036f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036e0:	f7ff f8f4 	bl	80028cc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ee:	d901      	bls.n	80036f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e007      	b.n	8003704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_PWREx_EnableOverDrive+0x98>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003700:	d1ee      	bne.n	80036e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	420e0040 	.word	0x420e0040
 8003714:	40007000 	.word	0x40007000
 8003718:	420e0044 	.word	0x420e0044

0800371c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0cc      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b68      	ldr	r3, [pc, #416]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d90c      	bls.n	8003758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d044      	beq.n	800383c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d119      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d003      	beq.n	80037da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e067      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4934      	ldr	r1, [pc, #208]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800380c:	f7ff f85e 	bl	80028cc <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	e00a      	b.n	800382a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7ff f85a 	bl	80028cc <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e04f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 020c 	and.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	429a      	cmp	r2, r3
 800383a:	d1eb      	bne.n	8003814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d20c      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f855 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe ffbe 	bl	8002844 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08006308 	.word	0x08006308
 80038e0:	20000034 	.word	0x20000034
 80038e4:	20000038 	.word	0x20000038

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000034 	.word	0x20000034

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08006318 	.word	0x08006318

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffdc 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	08006318 	.word	0x08006318

08003950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b0ae      	sub	sp, #184	; 0xb8
 8003956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003976:	4bcb      	ldr	r3, [pc, #812]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b0c      	cmp	r3, #12
 8003980:	f200 8206 	bhi.w	8003d90 <HAL_RCC_GetSysClockFreq+0x440>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039c1 	.word	0x080039c1
 8003990:	08003d91 	.word	0x08003d91
 8003994:	08003d91 	.word	0x08003d91
 8003998:	08003d91 	.word	0x08003d91
 800399c:	080039c9 	.word	0x080039c9
 80039a0:	08003d91 	.word	0x08003d91
 80039a4:	08003d91 	.word	0x08003d91
 80039a8:	08003d91 	.word	0x08003d91
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	08003d91 	.word	0x08003d91
 80039b4:	08003d91 	.word	0x08003d91
 80039b8:	08003d91 	.word	0x08003d91
 80039bc:	08003bc1 	.word	0x08003bc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4bb9      	ldr	r3, [pc, #740]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x358>)
 80039c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80039c6:	e1e7      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4bb8      	ldr	r3, [pc, #736]	; (8003cac <HAL_RCC_GetSysClockFreq+0x35c>)
 80039ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039ce:	e1e3      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	4bb4      	ldr	r3, [pc, #720]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039dc:	4bb1      	ldr	r3, [pc, #708]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d071      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e8:	4bae      	ldr	r3, [pc, #696]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a0e:	4622      	mov	r2, r4
 8003a10:	462b      	mov	r3, r5
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	0159      	lsls	r1, r3, #5
 8003a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a20:	0150      	lsls	r0, r2, #5
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4621      	mov	r1, r4
 8003a28:	1a51      	subs	r1, r2, r1
 8003a2a:	6439      	str	r1, [r7, #64]	; 0x40
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a40:	4649      	mov	r1, r9
 8003a42:	018b      	lsls	r3, r1, #6
 8003a44:	4641      	mov	r1, r8
 8003a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	018a      	lsls	r2, r1, #6
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1a51      	subs	r1, r2, r1
 8003a52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a54:	4649      	mov	r1, r9
 8003a56:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a68:	4649      	mov	r1, r9
 8003a6a:	00cb      	lsls	r3, r1, #3
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a72:	4641      	mov	r1, r8
 8003a74:	00ca      	lsls	r2, r1, #3
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	633b      	str	r3, [r7, #48]	; 0x30
 8003a82:	462b      	mov	r3, r5
 8003a84:	460a      	mov	r2, r1
 8003a86:	eb42 0303 	adc.w	r3, r2, r3
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a98:	4629      	mov	r1, r5
 8003a9a:	024b      	lsls	r3, r1, #9
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	024a      	lsls	r2, r1, #9
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ab4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ab8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003abc:	f7fc fc00 	bl	80002c0 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aca:	e067      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003acc:	4b75      	ldr	r3, [pc, #468]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ad8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003aee:	4622      	mov	r2, r4
 8003af0:	462b      	mov	r3, r5
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	0159      	lsls	r1, r3, #5
 8003afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b00:	0150      	lsls	r0, r2, #5
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4621      	mov	r1, r4
 8003b08:	1a51      	subs	r1, r2, r1
 8003b0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b20:	4649      	mov	r1, r9
 8003b22:	018b      	lsls	r3, r1, #6
 8003b24:	4641      	mov	r1, r8
 8003b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	018a      	lsls	r2, r1, #6
 8003b2e:	4641      	mov	r1, r8
 8003b30:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b34:	4649      	mov	r1, r9
 8003b36:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b4e:	4692      	mov	sl, r2
 8003b50:	469b      	mov	fp, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	eb1a 0303 	adds.w	r3, sl, r3
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	462b      	mov	r3, r5
 8003b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b6e:	4629      	mov	r1, r5
 8003b70:	028b      	lsls	r3, r1, #10
 8003b72:	4621      	mov	r1, r4
 8003b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b78:	4621      	mov	r1, r4
 8003b7a:	028a      	lsls	r2, r1, #10
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b84:	2200      	movs	r2, #0
 8003b86:	673b      	str	r3, [r7, #112]	; 0x70
 8003b88:	677a      	str	r2, [r7, #116]	; 0x74
 8003b8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b8e:	f7fc fb97 	bl	80002c0 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4613      	mov	r3, r2
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9c:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bbe:	e0eb      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc0:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06b      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd8:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	2200      	movs	r2, #0
 8003be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bea:	663b      	str	r3, [r7, #96]	; 0x60
 8003bec:	2300      	movs	r3, #0
 8003bee:	667b      	str	r3, [r7, #100]	; 0x64
 8003bf0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	0159      	lsls	r1, r3, #5
 8003c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c06:	0150      	lsls	r0, r2, #5
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	1a51      	subs	r1, r2, r1
 8003c10:	61b9      	str	r1, [r7, #24]
 8003c12:	4629      	mov	r1, r5
 8003c14:	eb63 0301 	sbc.w	r3, r3, r1
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c26:	4659      	mov	r1, fp
 8003c28:	018b      	lsls	r3, r1, #6
 8003c2a:	4651      	mov	r1, sl
 8003c2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c30:	4651      	mov	r1, sl
 8003c32:	018a      	lsls	r2, r1, #6
 8003c34:	4651      	mov	r1, sl
 8003c36:	ebb2 0801 	subs.w	r8, r2, r1
 8003c3a:	4659      	mov	r1, fp
 8003c3c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c54:	4690      	mov	r8, r2
 8003c56:	4699      	mov	r9, r3
 8003c58:	4623      	mov	r3, r4
 8003c5a:	eb18 0303 	adds.w	r3, r8, r3
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	462b      	mov	r3, r5
 8003c62:	eb49 0303 	adc.w	r3, r9, r3
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c74:	4629      	mov	r1, r5
 8003c76:	024b      	lsls	r3, r1, #9
 8003c78:	4621      	mov	r1, r4
 8003c7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c7e:	4621      	mov	r1, r4
 8003c80:	024a      	lsls	r2, r1, #9
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c94:	f7fc fb14 	bl	80002c0 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca2:	e065      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x420>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb0:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	4611      	mov	r1, r2
 8003cbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003cca:	4642      	mov	r2, r8
 8003ccc:	464b      	mov	r3, r9
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	0159      	lsls	r1, r3, #5
 8003cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cdc:	0150      	lsls	r0, r2, #5
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	1a51      	subs	r1, r2, r1
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	4649      	mov	r1, r9
 8003cea:	eb63 0301 	sbc.w	r3, r3, r1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	018b      	lsls	r3, r1, #6
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d06:	4651      	mov	r1, sl
 8003d08:	018a      	lsls	r2, r1, #6
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	1a54      	subs	r4, r2, r1
 8003d0e:	4659      	mov	r1, fp
 8003d10:	eb63 0501 	sbc.w	r5, r3, r1
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	00eb      	lsls	r3, r5, #3
 8003d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d22:	00e2      	lsls	r2, r4, #3
 8003d24:	4614      	mov	r4, r2
 8003d26:	461d      	mov	r5, r3
 8003d28:	4643      	mov	r3, r8
 8003d2a:	18e3      	adds	r3, r4, r3
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	464b      	mov	r3, r9
 8003d30:	eb45 0303 	adc.w	r3, r5, r3
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d42:	4629      	mov	r1, r5
 8003d44:	028b      	lsls	r3, r1, #10
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	028a      	lsls	r2, r1, #10
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d58:	2200      	movs	r2, #0
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d62:	f7fc faad 	bl	80002c0 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0f1b      	lsrs	r3, r3, #28
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d8e:	e003      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	37b8      	adds	r7, #184	; 0xb8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400

08003db0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e28d      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8083 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dd0:	4b94      	ldr	r3, [pc, #592]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d019      	beq.n	8003e10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ddc:	4b91      	ldr	r3, [pc, #580]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003de8:	4b8e      	ldr	r3, [pc, #568]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df4:	d00c      	beq.n	8003e10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b8b      	ldr	r3, [pc, #556]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d112      	bne.n	8003e28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e02:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0e:	d10b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	4b84      	ldr	r3, [pc, #528]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d05b      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x124>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d157      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e25a      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x90>
 8003e32:	4b7c      	ldr	r3, [pc, #496]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a7b      	ldr	r2, [pc, #492]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e01d      	b.n	8003e7c <HAL_RCC_OscConfig+0xcc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCC_OscConfig+0xb4>
 8003e4a:	4b76      	ldr	r3, [pc, #472]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a75      	ldr	r2, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b73      	ldr	r3, [pc, #460]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a72      	ldr	r2, [pc, #456]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e00b      	b.n	8003e7c <HAL_RCC_OscConfig+0xcc>
 8003e64:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6e      	ldr	r2, [pc, #440]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b6c      	ldr	r3, [pc, #432]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a6b      	ldr	r2, [pc, #428]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe fd22 	bl	80028cc <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fe fd1e 	bl	80028cc <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e21f      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0xdc>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe fd0e 	bl	80028cc <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fd0a 	bl	80028cc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e20b      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	4b57      	ldr	r3, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x104>
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d06f      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ee2:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eee:	4b4d      	ldr	r3, [pc, #308]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d105      	bne.n	8003f06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d11c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f12:	4b44      	ldr	r3, [pc, #272]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d116      	bne.n	8003f4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x186>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e1d3      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	e03a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_OscConfig+0x278>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fcb7 	bl	80028cc <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fe fcb3 	bl	80028cc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1b4      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4925      	ldr	r1, [pc, #148]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x278>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fc96 	bl	80028cc <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fe fc92 	bl	80028cc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e193      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d036      	beq.n	800403c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_RCC_OscConfig+0x27c>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fc76 	bl	80028cc <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe fc72 	bl	80028cc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e173      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x234>
 8004002:	e01b      	b.n	800403c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_OscConfig+0x27c>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fe fc5f 	bl	80028cc <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	e00e      	b.n	8004030 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fe fc5b 	bl	80028cc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d907      	bls.n	8004030 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e15c      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
 8004024:	40023800 	.word	0x40023800
 8004028:	42470000 	.word	0x42470000
 800402c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	4b8a      	ldr	r3, [pc, #552]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ea      	bne.n	8004012 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8097 	beq.w	8004178 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404e:	4b83      	ldr	r3, [pc, #524]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	4b7f      	ldr	r3, [pc, #508]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a7e      	ldr	r2, [pc, #504]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b7c      	ldr	r3, [pc, #496]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	4b79      	ldr	r3, [pc, #484]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004086:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a75      	ldr	r2, [pc, #468]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fe fc1b 	bl	80028cc <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fe fc17 	bl	80028cc <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e118      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_RCC_OscConfig+0x4b0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x31e>
 80040c0:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a65      	ldr	r2, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x358>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b05      	cmp	r3, #5
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x340>
 80040d6:	4b61      	ldr	r3, [pc, #388]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	4b5e      	ldr	r3, [pc, #376]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0x358>
 80040f0:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a59      	ldr	r2, [pc, #356]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b57      	ldr	r3, [pc, #348]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a56      	ldr	r2, [pc, #344]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fe fbdc 	bl	80028cc <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fe fbd8 	bl	80028cc <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0d7      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ee      	beq.n	8004118 <HAL_RCC_OscConfig+0x368>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fe fbc6 	bl	80028cc <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fe fbc2 	bl	80028cc <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0c1      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415a:	4b40      	ldr	r3, [pc, #256]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ee      	bne.n	8004144 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80ad 	beq.w	80042dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b08      	cmp	r3, #8
 800418c:	d060      	beq.n	8004250 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d145      	bne.n	8004222 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_RCC_OscConfig+0x4b4>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe fb96 	bl	80028cc <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe fb92 	bl	80028cc <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e093      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b6:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	019b      	lsls	r3, r3, #6
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	3b01      	subs	r3, #1
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	491b      	ldr	r1, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCC_OscConfig+0x4b4>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fe fb67 	bl	80028cc <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fe fb63 	bl	80028cc <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e064      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x452>
 8004220:	e05c      	b.n	80042dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_RCC_OscConfig+0x4b4>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe fb50 	bl	80028cc <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fe fb4c 	bl	80028cc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e04d      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_RCC_OscConfig+0x4ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x480>
 800424e:	e045      	b.n	80042dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e040      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
 800425c:	40023800 	.word	0x40023800
 8004260:	40007000 	.word	0x40007000
 8004264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <HAL_RCC_OscConfig+0x538>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d030      	beq.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d129      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d122      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800429e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d119      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	3b01      	subs	r3, #1
 80042b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d10f      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800

080042ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e03f      	b.n	800437e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fe f8b6 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2224      	movs	r2, #36	; 0x24
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800432e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 ff43 	bl	80051bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08c      	sub	sp, #48	; 0x30
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d165      	bne.n	800446e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_UART_Transmit_DMA+0x26>
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e05e      	b.n	8004470 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Transmit_DMA+0x38>
 80043bc:	2302      	movs	r3, #2
 80043be:	e057      	b.n	8004470 <HAL_UART_Transmit_DMA+0xe8>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	88fa      	ldrh	r2, [r7, #6]
 80043d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2221      	movs	r2, #33	; 0x21
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	4a22      	ldr	r2, [pc, #136]	; (8004478 <HAL_UART_Transmit_DMA+0xf0>)
 80043ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	4a21      	ldr	r2, [pc, #132]	; (800447c <HAL_UART_Transmit_DMA+0xf4>)
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	4a20      	ldr	r2, [pc, #128]	; (8004480 <HAL_UART_Transmit_DMA+0xf8>)
 80043fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	2200      	movs	r2, #0
 8004406:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004408:	f107 0308 	add.w	r3, r7, #8
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3304      	adds	r3, #4
 800441c:	461a      	mov	r2, r3
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	f7fe fc44 	bl	8002cac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800442c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	617b      	str	r3, [r7, #20]
   return(result);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3314      	adds	r3, #20
 8004454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004456:	627a      	str	r2, [r7, #36]	; 0x24
 8004458:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6a39      	ldr	r1, [r7, #32]
 800445c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	61fb      	str	r3, [r7, #28]
   return(result);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3730      	adds	r7, #48	; 0x30
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08004a55 	.word	0x08004a55
 800447c:	08004aef 	.word	0x08004aef
 8004480:	08004c67 	.word	0x08004c67

08004484 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d11d      	bne.n	80044da <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Receive_DMA+0x26>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e016      	b.n	80044dc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Receive_DMA+0x38>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e00f      	b.n	80044dc <HAL_UART_Receive_DMA+0x58>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	461a      	mov	r2, r3
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fc13 	bl	8004cfc <UART_Start_Receive_DMA>
 80044d6:	4603      	mov	r3, r0
 80044d8:	e000      	b.n	80044dc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044da:	2302      	movs	r3, #2
  }
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b0ba      	sub	sp, #232	; 0xe8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_UART_IRQHandler+0x66>
 8004536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fd7f 	bl	8005046 <UART_Receive_IT>
      return;
 8004548:	e256      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800454a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80de 	beq.w	8004710 <HAL_UART_IRQHandler+0x22c>
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80d1 	beq.w	8004710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_UART_IRQHandler+0xae>
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
 800459e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0202 	orr.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_UART_IRQHandler+0xf6>
 80045c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_UART_IRQHandler+0x126>
 80045e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0208 	orr.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 81ed 	beq.w	80049ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_UART_IRQHandler+0x14e>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fd0a 	bl	8005046 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <HAL_UART_IRQHandler+0x17a>
 8004656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04f      	beq.n	80046fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fc12 	bl	8004e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d141      	bne.n	80046f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800469e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1d9      	bne.n	8004672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d013      	beq.n	80046ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	4a7d      	ldr	r2, [pc, #500]	; (80048c0 <HAL_UART_IRQHandler+0x3dc>)
 80046cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fbb2 	bl	8002e3c <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e00e      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f99a 	bl	8004a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e00a      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f996 	bl	8004a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e006      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f992 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800470a:	e170      	b.n	80049ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	bf00      	nop
    return;
 800470e:	e16e      	b.n	80049ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 814a 	bne.w	80049ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8143 	beq.w	80049ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 813c 	beq.w	80049ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	f040 80b4 	bne.w	80048c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8140 	beq.w	80049f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800477a:	429a      	cmp	r2, r3
 800477c:	f080 8139 	bcs.w	80049f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	f000 8088 	beq.w	80048a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1d9      	bne.n	8004796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800480a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800480e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e1      	bne.n	80047e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800482e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e3      	bne.n	800481e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	f023 0310 	bic.w	r3, r3, #16
 800487a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004888:	65ba      	str	r2, [r7, #88]	; 0x58
 800488a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800488e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e3      	bne.n	8004864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fa5b 	bl	8002d5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8c0 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048bc:	e099      	b.n	80049f2 <HAL_UART_IRQHandler+0x50e>
 80048be:	bf00      	nop
 80048c0:	08004f4f 	.word	0x08004f4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 808b 	beq.w	80049f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8086 	beq.w	80049f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800490e:	647a      	str	r2, [r7, #68]	; 0x44
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e3      	bne.n	80048ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	623b      	str	r3, [r7, #32]
   return(result);
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004946:	633a      	str	r2, [r7, #48]	; 0x30
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60fb      	str	r3, [r7, #12]
   return(result);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800498c:	61fa      	str	r2, [r7, #28]
 800498e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	617b      	str	r3, [r7, #20]
   return(result);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e3      	bne.n	8004968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f848 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ac:	e023      	b.n	80049f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_UART_IRQHandler+0x4ea>
 80049ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fad5 	bl	8004f76 <UART_Transmit_IT>
    return;
 80049cc:	e014      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <HAL_UART_IRQHandler+0x514>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb15 	bl	8005016 <UART_EndTransmit_IT>
    return;
 80049ec:	e004      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
    return;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
      return;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
      return;
 80049f6:	bf00      	nop
  }
}
 80049f8:	37e8      	adds	r7, #232	; 0xe8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop

08004a00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b090      	sub	sp, #64	; 0x40
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d137      	bne.n	8004ae0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	2200      	movs	r2, #0
 8004a74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	623b      	str	r3, [r7, #32]
   return(result);
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3314      	adds	r3, #20
 8004a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a96:	633a      	str	r2, [r7, #48]	; 0x30
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e5      	bne.n	8004a76 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aca:	61fa      	str	r2, [r7, #28]
 8004acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	69b9      	ldr	r1, [r7, #24]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e5      	bne.n	8004aaa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ade:	e002      	b.n	8004ae6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004ae0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ae2:	f7fc ff4f 	bl	8001984 <HAL_UART_TxCpltCallback>
}
 8004ae6:	bf00      	nop
 8004ae8:	3740      	adds	r7, #64	; 0x40
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff ff7f 	bl	8004a00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b09c      	sub	sp, #112	; 0x70
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d172      	bne.n	8004c0c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	2200      	movs	r2, #0
 8004b2a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	667b      	str	r3, [r7, #100]	; 0x64
 8004b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b80:	647a      	str	r2, [r7, #68]	; 0x44
 8004b82:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004baa:	663b      	str	r3, [r7, #96]	; 0x60
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bb4:	633a      	str	r2, [r7, #48]	; 0x30
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d119      	bne.n	8004c0c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0310 	bic.w	r3, r3, #16
 8004bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bf8:	61fa      	str	r2, [r7, #28]
 8004bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	69b9      	ldr	r1, [r7, #24]
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	617b      	str	r3, [r7, #20]
   return(result);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e5      	bne.n	8004bd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d106      	bne.n	8004c22 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c1c:	f7ff ff0e 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c20:	e002      	b.n	8004c28 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004c22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c24:	f7fc fec0 	bl	80019a8 <HAL_UART_RxCpltCallback>
}
 8004c28:	bf00      	nop
 8004c2a:	3770      	adds	r7, #112	; 0x70
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d108      	bne.n	8004c58 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4619      	mov	r1, r3
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff fef3 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c56:	e002      	b.n	8004c5e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff fedb 	bl	8004a14 <HAL_UART_RxHalfCpltCallback>
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b21      	cmp	r3, #33	; 0x21
 8004c98:	d108      	bne.n	8004cac <UART_DMAError+0x46>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	f000 f8c6 	bl	8004e38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b22      	cmp	r3, #34	; 0x22
 8004ccc:	d108      	bne.n	8004ce0 <UART_DMAError+0x7a>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004cda:	68b8      	ldr	r0, [r7, #8]
 8004cdc:	f000 f8d4 	bl	8004e88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0210 	orr.w	r2, r3, #16
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cec:	68b8      	ldr	r0, [r7, #8]
 8004cee:	f7ff fe9b 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b098      	sub	sp, #96	; 0x60
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2222      	movs	r2, #34	; 0x22
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <UART_Start_Receive_DMA+0x130>)
 8004d2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	4a3f      	ldr	r2, [pc, #252]	; (8004e30 <UART_Start_Receive_DMA+0x134>)
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	4a3e      	ldr	r2, [pc, #248]	; (8004e34 <UART_Start_Receive_DMA+0x138>)
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	2200      	movs	r2, #0
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d44:	f107 0308 	add.w	r3, r7, #8
 8004d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	f7fd ffa6 	bl	8002cac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d019      	beq.n	8004dba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dda:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3314      	adds	r3, #20
 8004df4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e04:	653b      	str	r3, [r7, #80]	; 0x50
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6a39      	ldr	r1, [r7, #32]
 8004e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3760      	adds	r7, #96	; 0x60
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	08004b0b 	.word	0x08004b0b
 8004e30:	08004c31 	.word	0x08004c31
 8004e34:	08004c67 	.word	0x08004c67

08004e38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	; 0x24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	61ba      	str	r2, [r7, #24]
 8004e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6979      	ldr	r1, [r7, #20]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e7c:	bf00      	nop
 8004e7e:	3724      	adds	r7, #36	; 0x24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b095      	sub	sp, #84	; 0x54
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eb0:	643a      	str	r2, [r7, #64]	; 0x40
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e5      	bne.n	8004e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3314      	adds	r3, #20
 8004eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3314      	adds	r3, #20
 8004ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d119      	bne.n	8004f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f023 0310 	bic.w	r3, r3, #16
 8004f16:	647b      	str	r3, [r7, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f20:	61ba      	str	r2, [r7, #24]
 8004f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f42:	bf00      	nop
 8004f44:	3754      	adds	r7, #84	; 0x54
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff fd5d 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b21      	cmp	r3, #33	; 0x21
 8004f88:	d13e      	bne.n	8005008 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f92:	d114      	bne.n	8004fbe <UART_Transmit_IT+0x48>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d110      	bne.n	8004fbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	1c9a      	adds	r2, r3, #2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]
 8004fbc:	e008      	b.n	8004fd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6211      	str	r1, [r2, #32]
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10f      	bne.n	8005004 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005002:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e000      	b.n	800500a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005008:	2302      	movs	r3, #2
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc fca4 	bl	8001984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b08c      	sub	sp, #48	; 0x30
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b22      	cmp	r3, #34	; 0x22
 8005058:	f040 80ab 	bne.w	80051b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	d117      	bne.n	8005096 <UART_Receive_IT+0x50>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d113      	bne.n	8005096 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005084:	b29a      	uxth	r2, r3
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
 8005094:	e026      	b.n	80050e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a8:	d007      	beq.n	80050ba <UART_Receive_IT+0x74>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <UART_Receive_IT+0x82>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e008      	b.n	80050da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4619      	mov	r1, r3
 80050f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d15a      	bne.n	80051ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0220 	bic.w	r2, r2, #32
 8005106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	2b01      	cmp	r3, #1
 8005136:	d135      	bne.n	80051a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	613b      	str	r3, [r7, #16]
   return(result);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f023 0310 	bic.w	r3, r3, #16
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	330c      	adds	r3, #12
 800515c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515e:	623a      	str	r2, [r7, #32]
 8005160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	69f9      	ldr	r1, [r7, #28]
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	61bb      	str	r3, [r7, #24]
   return(result);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e5      	bne.n	800513e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b10      	cmp	r3, #16
 800517e:	d10a      	bne.n	8005196 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fc4d 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
 80051a2:	e002      	b.n	80051aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fc fbff 	bl	80019a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e002      	b.n	80051b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3730      	adds	r7, #48	; 0x30
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b0c0      	sub	sp, #256	; 0x100
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	68d9      	ldr	r1, [r3, #12]
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	ea40 0301 	orr.w	r3, r0, r1
 80051e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005214:	f021 010c 	bic.w	r1, r1, #12
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005222:	430b      	orrs	r3, r1
 8005224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	6999      	ldr	r1, [r3, #24]
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	ea40 0301 	orr.w	r3, r0, r1
 8005242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b8f      	ldr	r3, [pc, #572]	; (8005488 <UART_SetConfig+0x2cc>)
 800524c:	429a      	cmp	r2, r3
 800524e:	d005      	beq.n	800525c <UART_SetConfig+0xa0>
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b8d      	ldr	r3, [pc, #564]	; (800548c <UART_SetConfig+0x2d0>)
 8005258:	429a      	cmp	r2, r3
 800525a:	d104      	bne.n	8005266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800525c:	f7fe fb64 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8005260:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005264:	e003      	b.n	800526e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005266:	f7fe fb4b 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 800526a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	f040 810c 	bne.w	8005494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800527c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005280:	2200      	movs	r2, #0
 8005282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005286:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800528a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800528e:	4622      	mov	r2, r4
 8005290:	462b      	mov	r3, r5
 8005292:	1891      	adds	r1, r2, r2
 8005294:	65b9      	str	r1, [r7, #88]	; 0x58
 8005296:	415b      	adcs	r3, r3
 8005298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800529a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800529e:	4621      	mov	r1, r4
 80052a0:	eb12 0801 	adds.w	r8, r2, r1
 80052a4:	4629      	mov	r1, r5
 80052a6:	eb43 0901 	adc.w	r9, r3, r1
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052be:	4690      	mov	r8, r2
 80052c0:	4699      	mov	r9, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	eb18 0303 	adds.w	r3, r8, r3
 80052c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052cc:	462b      	mov	r3, r5
 80052ce:	eb49 0303 	adc.w	r3, r9, r3
 80052d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052ea:	460b      	mov	r3, r1
 80052ec:	18db      	adds	r3, r3, r3
 80052ee:	653b      	str	r3, [r7, #80]	; 0x50
 80052f0:	4613      	mov	r3, r2
 80052f2:	eb42 0303 	adc.w	r3, r2, r3
 80052f6:	657b      	str	r3, [r7, #84]	; 0x54
 80052f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005300:	f7fa ffde 	bl	80002c0 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4b61      	ldr	r3, [pc, #388]	; (8005490 <UART_SetConfig+0x2d4>)
 800530a:	fba3 2302 	umull	r2, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	011c      	lsls	r4, r3, #4
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005316:	2200      	movs	r2, #0
 8005318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800531c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	1891      	adds	r1, r2, r2
 800532a:	64b9      	str	r1, [r7, #72]	; 0x48
 800532c:	415b      	adcs	r3, r3
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005334:	4641      	mov	r1, r8
 8005336:	eb12 0a01 	adds.w	sl, r2, r1
 800533a:	4649      	mov	r1, r9
 800533c:	eb43 0b01 	adc.w	fp, r3, r1
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800534c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005354:	4692      	mov	sl, r2
 8005356:	469b      	mov	fp, r3
 8005358:	4643      	mov	r3, r8
 800535a:	eb1a 0303 	adds.w	r3, sl, r3
 800535e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005362:	464b      	mov	r3, r9
 8005364:	eb4b 0303 	adc.w	r3, fp, r3
 8005368:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005378:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800537c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005380:	460b      	mov	r3, r1
 8005382:	18db      	adds	r3, r3, r3
 8005384:	643b      	str	r3, [r7, #64]	; 0x40
 8005386:	4613      	mov	r3, r2
 8005388:	eb42 0303 	adc.w	r3, r2, r3
 800538c:	647b      	str	r3, [r7, #68]	; 0x44
 800538e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005396:	f7fa ff93 	bl	80002c0 <__aeabi_uldivmod>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	4b3b      	ldr	r3, [pc, #236]	; (8005490 <UART_SetConfig+0x2d4>)
 80053a2:	fba3 2301 	umull	r2, r3, r3, r1
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2264      	movs	r2, #100	; 0x64
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	1acb      	subs	r3, r1, r3
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053b6:	4b36      	ldr	r3, [pc, #216]	; (8005490 <UART_SetConfig+0x2d4>)
 80053b8:	fba3 2302 	umull	r2, r3, r3, r2
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053c4:	441c      	add	r4, r3
 80053c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	1891      	adds	r1, r2, r2
 80053de:	63b9      	str	r1, [r7, #56]	; 0x38
 80053e0:	415b      	adcs	r3, r3
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053e8:	4641      	mov	r1, r8
 80053ea:	1851      	adds	r1, r2, r1
 80053ec:	6339      	str	r1, [r7, #48]	; 0x30
 80053ee:	4649      	mov	r1, r9
 80053f0:	414b      	adcs	r3, r1
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005400:	4659      	mov	r1, fp
 8005402:	00cb      	lsls	r3, r1, #3
 8005404:	4651      	mov	r1, sl
 8005406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540a:	4651      	mov	r1, sl
 800540c:	00ca      	lsls	r2, r1, #3
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	4603      	mov	r3, r0
 8005414:	4642      	mov	r2, r8
 8005416:	189b      	adds	r3, r3, r2
 8005418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800541c:	464b      	mov	r3, r9
 800541e:	460a      	mov	r2, r1
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005434:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800543c:	460b      	mov	r3, r1
 800543e:	18db      	adds	r3, r3, r3
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
 8005442:	4613      	mov	r3, r2
 8005444:	eb42 0303 	adc.w	r3, r2, r3
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800544e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005452:	f7fa ff35 	bl	80002c0 <__aeabi_uldivmod>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4b0d      	ldr	r3, [pc, #52]	; (8005490 <UART_SetConfig+0x2d4>)
 800545c:	fba3 1302 	umull	r1, r3, r3, r2
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	2164      	movs	r1, #100	; 0x64
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	3332      	adds	r3, #50	; 0x32
 800546e:	4a08      	ldr	r2, [pc, #32]	; (8005490 <UART_SetConfig+0x2d4>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	f003 0207 	and.w	r2, r3, #7
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4422      	add	r2, r4
 8005482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005484:	e105      	b.n	8005692 <UART_SetConfig+0x4d6>
 8005486:	bf00      	nop
 8005488:	40011000 	.word	0x40011000
 800548c:	40011400 	.word	0x40011400
 8005490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005498:	2200      	movs	r2, #0
 800549a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800549e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054a6:	4642      	mov	r2, r8
 80054a8:	464b      	mov	r3, r9
 80054aa:	1891      	adds	r1, r2, r2
 80054ac:	6239      	str	r1, [r7, #32]
 80054ae:	415b      	adcs	r3, r3
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 80054b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054b6:	4641      	mov	r1, r8
 80054b8:	1854      	adds	r4, r2, r1
 80054ba:	4649      	mov	r1, r9
 80054bc:	eb43 0501 	adc.w	r5, r3, r1
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	00eb      	lsls	r3, r5, #3
 80054ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ce:	00e2      	lsls	r2, r4, #3
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	4643      	mov	r3, r8
 80054d6:	18e3      	adds	r3, r4, r3
 80054d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054dc:	464b      	mov	r3, r9
 80054de:	eb45 0303 	adc.w	r3, r5, r3
 80054e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005502:	4629      	mov	r1, r5
 8005504:	008b      	lsls	r3, r1, #2
 8005506:	4621      	mov	r1, r4
 8005508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550c:	4621      	mov	r1, r4
 800550e:	008a      	lsls	r2, r1, #2
 8005510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005514:	f7fa fed4 	bl	80002c0 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4b60      	ldr	r3, [pc, #384]	; (80056a0 <UART_SetConfig+0x4e4>)
 800551e:	fba3 2302 	umull	r2, r3, r3, r2
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	011c      	lsls	r4, r3, #4
 8005526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552a:	2200      	movs	r2, #0
 800552c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005530:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005538:	4642      	mov	r2, r8
 800553a:	464b      	mov	r3, r9
 800553c:	1891      	adds	r1, r2, r2
 800553e:	61b9      	str	r1, [r7, #24]
 8005540:	415b      	adcs	r3, r3
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005548:	4641      	mov	r1, r8
 800554a:	1851      	adds	r1, r2, r1
 800554c:	6139      	str	r1, [r7, #16]
 800554e:	4649      	mov	r1, r9
 8005550:	414b      	adcs	r3, r1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005560:	4659      	mov	r1, fp
 8005562:	00cb      	lsls	r3, r1, #3
 8005564:	4651      	mov	r1, sl
 8005566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556a:	4651      	mov	r1, sl
 800556c:	00ca      	lsls	r2, r1, #3
 800556e:	4610      	mov	r0, r2
 8005570:	4619      	mov	r1, r3
 8005572:	4603      	mov	r3, r0
 8005574:	4642      	mov	r2, r8
 8005576:	189b      	adds	r3, r3, r2
 8005578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800557c:	464b      	mov	r3, r9
 800557e:	460a      	mov	r2, r1
 8005580:	eb42 0303 	adc.w	r3, r2, r3
 8005584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	67bb      	str	r3, [r7, #120]	; 0x78
 8005592:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055a0:	4649      	mov	r1, r9
 80055a2:	008b      	lsls	r3, r1, #2
 80055a4:	4641      	mov	r1, r8
 80055a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055aa:	4641      	mov	r1, r8
 80055ac:	008a      	lsls	r2, r1, #2
 80055ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055b2:	f7fa fe85 	bl	80002c0 <__aeabi_uldivmod>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <UART_SetConfig+0x4e4>)
 80055bc:	fba3 1302 	umull	r1, r3, r3, r2
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	2164      	movs	r1, #100	; 0x64
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	3332      	adds	r3, #50	; 0x32
 80055ce:	4a34      	ldr	r2, [pc, #208]	; (80056a0 <UART_SetConfig+0x4e4>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055da:	441c      	add	r4, r3
 80055dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e0:	2200      	movs	r2, #0
 80055e2:	673b      	str	r3, [r7, #112]	; 0x70
 80055e4:	677a      	str	r2, [r7, #116]	; 0x74
 80055e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055ea:	4642      	mov	r2, r8
 80055ec:	464b      	mov	r3, r9
 80055ee:	1891      	adds	r1, r2, r2
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	415b      	adcs	r3, r3
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055fa:	4641      	mov	r1, r8
 80055fc:	1851      	adds	r1, r2, r1
 80055fe:	6039      	str	r1, [r7, #0]
 8005600:	4649      	mov	r1, r9
 8005602:	414b      	adcs	r3, r1
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005612:	4659      	mov	r1, fp
 8005614:	00cb      	lsls	r3, r1, #3
 8005616:	4651      	mov	r1, sl
 8005618:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800561c:	4651      	mov	r1, sl
 800561e:	00ca      	lsls	r2, r1, #3
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	4603      	mov	r3, r0
 8005626:	4642      	mov	r2, r8
 8005628:	189b      	adds	r3, r3, r2
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	464b      	mov	r3, r9
 800562e:	460a      	mov	r2, r1
 8005630:	eb42 0303 	adc.w	r3, r2, r3
 8005634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	663b      	str	r3, [r7, #96]	; 0x60
 8005640:	667a      	str	r2, [r7, #100]	; 0x64
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800564e:	4649      	mov	r1, r9
 8005650:	008b      	lsls	r3, r1, #2
 8005652:	4641      	mov	r1, r8
 8005654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005658:	4641      	mov	r1, r8
 800565a:	008a      	lsls	r2, r1, #2
 800565c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005660:	f7fa fe2e 	bl	80002c0 <__aeabi_uldivmod>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <UART_SetConfig+0x4e4>)
 800566a:	fba3 1302 	umull	r1, r3, r3, r2
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	2164      	movs	r1, #100	; 0x64
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	3332      	adds	r3, #50	; 0x32
 800567c:	4a08      	ldr	r2, [pc, #32]	; (80056a0 <UART_SetConfig+0x4e4>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	f003 020f 	and.w	r2, r3, #15
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4422      	add	r2, r4
 8005690:	609a      	str	r2, [r3, #8]
}
 8005692:	bf00      	nop
 8005694:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005698:	46bd      	mov	sp, r7
 800569a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569e:	bf00      	nop
 80056a0:	51eb851f 	.word	0x51eb851f

080056a4 <__cxa_pure_virtual>:
 80056a4:	b508      	push	{r3, lr}
 80056a6:	f000 f80d 	bl	80056c4 <_ZSt9terminatev>

080056aa <_ZN10__cxxabiv111__terminateEPFvvE>:
 80056aa:	b508      	push	{r3, lr}
 80056ac:	4780      	blx	r0
 80056ae:	f000 f80e 	bl	80056ce <abort>
	...

080056b4 <_ZSt13get_terminatev>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <_ZSt13get_terminatev+0xc>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	f3bf 8f5b 	dmb	ish
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000040 	.word	0x20000040

080056c4 <_ZSt9terminatev>:
 80056c4:	b508      	push	{r3, lr}
 80056c6:	f7ff fff5 	bl	80056b4 <_ZSt13get_terminatev>
 80056ca:	f7ff ffee 	bl	80056aa <_ZN10__cxxabiv111__terminateEPFvvE>

080056ce <abort>:
 80056ce:	b508      	push	{r3, lr}
 80056d0:	2006      	movs	r0, #6
 80056d2:	f000 f873 	bl	80057bc <raise>
 80056d6:	2001      	movs	r0, #1
 80056d8:	f7fc ffea 	bl	80026b0 <_exit>

080056dc <__errno>:
 80056dc:	4b01      	ldr	r3, [pc, #4]	; (80056e4 <__errno+0x8>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000044 	.word	0x20000044

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4d0d      	ldr	r5, [pc, #52]	; (8005720 <__libc_init_array+0x38>)
 80056ec:	4c0d      	ldr	r4, [pc, #52]	; (8005724 <__libc_init_array+0x3c>)
 80056ee:	1b64      	subs	r4, r4, r5
 80056f0:	10a4      	asrs	r4, r4, #2
 80056f2:	2600      	movs	r6, #0
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	4d0b      	ldr	r5, [pc, #44]	; (8005728 <__libc_init_array+0x40>)
 80056fa:	4c0c      	ldr	r4, [pc, #48]	; (800572c <__libc_init_array+0x44>)
 80056fc:	f000 fcd8 	bl	80060b0 <_init>
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	2600      	movs	r6, #0
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f855 3b04 	ldr.w	r3, [r5], #4
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	08006364 	.word	0x08006364
 8005724:	08006364 	.word	0x08006364
 8005728:	08006364 	.word	0x08006364
 800572c:	0800636c 	.word	0x0800636c

08005730 <memcpy>:
 8005730:	440a      	add	r2, r1
 8005732:	4291      	cmp	r1, r2
 8005734:	f100 33ff 	add.w	r3, r0, #4294967295
 8005738:	d100      	bne.n	800573c <memcpy+0xc>
 800573a:	4770      	bx	lr
 800573c:	b510      	push	{r4, lr}
 800573e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005746:	4291      	cmp	r1, r2
 8005748:	d1f9      	bne.n	800573e <memcpy+0xe>
 800574a:	bd10      	pop	{r4, pc}

0800574c <memset>:
 800574c:	4402      	add	r2, r0
 800574e:	4603      	mov	r3, r0
 8005750:	4293      	cmp	r3, r2
 8005752:	d100      	bne.n	8005756 <memset+0xa>
 8005754:	4770      	bx	lr
 8005756:	f803 1b01 	strb.w	r1, [r3], #1
 800575a:	e7f9      	b.n	8005750 <memset+0x4>

0800575c <realloc>:
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <realloc+0xc>)
 800575e:	460a      	mov	r2, r1
 8005760:	4601      	mov	r1, r0
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	f000 b8fa 	b.w	800595c <_realloc_r>
 8005768:	20000044 	.word	0x20000044

0800576c <_raise_r>:
 800576c:	291f      	cmp	r1, #31
 800576e:	b538      	push	{r3, r4, r5, lr}
 8005770:	4604      	mov	r4, r0
 8005772:	460d      	mov	r5, r1
 8005774:	d904      	bls.n	8005780 <_raise_r+0x14>
 8005776:	2316      	movs	r3, #22
 8005778:	6003      	str	r3, [r0, #0]
 800577a:	f04f 30ff 	mov.w	r0, #4294967295
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005782:	b112      	cbz	r2, 800578a <_raise_r+0x1e>
 8005784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005788:	b94b      	cbnz	r3, 800579e <_raise_r+0x32>
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f830 	bl	80057f0 <_getpid_r>
 8005790:	462a      	mov	r2, r5
 8005792:	4601      	mov	r1, r0
 8005794:	4620      	mov	r0, r4
 8005796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800579a:	f000 b817 	b.w	80057cc <_kill_r>
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d00a      	beq.n	80057b8 <_raise_r+0x4c>
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	d103      	bne.n	80057ae <_raise_r+0x42>
 80057a6:	2316      	movs	r3, #22
 80057a8:	6003      	str	r3, [r0, #0]
 80057aa:	2001      	movs	r0, #1
 80057ac:	e7e7      	b.n	800577e <_raise_r+0x12>
 80057ae:	2400      	movs	r4, #0
 80057b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057b4:	4628      	mov	r0, r5
 80057b6:	4798      	blx	r3
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7e0      	b.n	800577e <_raise_r+0x12>

080057bc <raise>:
 80057bc:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <raise+0xc>)
 80057be:	4601      	mov	r1, r0
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	f7ff bfd3 	b.w	800576c <_raise_r>
 80057c6:	bf00      	nop
 80057c8:	20000044 	.word	0x20000044

080057cc <_kill_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4d07      	ldr	r5, [pc, #28]	; (80057ec <_kill_r+0x20>)
 80057d0:	2300      	movs	r3, #0
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	602b      	str	r3, [r5, #0]
 80057da:	f7fc ff59 	bl	8002690 <_kill>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	d102      	bne.n	80057e8 <_kill_r+0x1c>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	b103      	cbz	r3, 80057e8 <_kill_r+0x1c>
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	bd38      	pop	{r3, r4, r5, pc}
 80057ea:	bf00      	nop
 80057ec:	20000b38 	.word	0x20000b38

080057f0 <_getpid_r>:
 80057f0:	f7fc bf46 	b.w	8002680 <_getpid>

080057f4 <siprintf>:
 80057f4:	b40e      	push	{r1, r2, r3}
 80057f6:	b500      	push	{lr}
 80057f8:	b09c      	sub	sp, #112	; 0x70
 80057fa:	ab1d      	add	r3, sp, #116	; 0x74
 80057fc:	9002      	str	r0, [sp, #8]
 80057fe:	9006      	str	r0, [sp, #24]
 8005800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005804:	4809      	ldr	r0, [pc, #36]	; (800582c <siprintf+0x38>)
 8005806:	9107      	str	r1, [sp, #28]
 8005808:	9104      	str	r1, [sp, #16]
 800580a:	4909      	ldr	r1, [pc, #36]	; (8005830 <siprintf+0x3c>)
 800580c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005810:	9105      	str	r1, [sp, #20]
 8005812:	6800      	ldr	r0, [r0, #0]
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	a902      	add	r1, sp, #8
 8005818:	f000 f92a 	bl	8005a70 <_svfiprintf_r>
 800581c:	9b02      	ldr	r3, [sp, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	b01c      	add	sp, #112	; 0x70
 8005824:	f85d eb04 	ldr.w	lr, [sp], #4
 8005828:	b003      	add	sp, #12
 800582a:	4770      	bx	lr
 800582c:	20000044 	.word	0x20000044
 8005830:	ffff0208 	.word	0xffff0208

08005834 <sbrk_aligned>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4e0e      	ldr	r6, [pc, #56]	; (8005870 <sbrk_aligned+0x3c>)
 8005838:	460c      	mov	r4, r1
 800583a:	6831      	ldr	r1, [r6, #0]
 800583c:	4605      	mov	r5, r0
 800583e:	b911      	cbnz	r1, 8005846 <sbrk_aligned+0x12>
 8005840:	f000 fbaa 	bl	8005f98 <_sbrk_r>
 8005844:	6030      	str	r0, [r6, #0]
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f000 fba5 	bl	8005f98 <_sbrk_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d00a      	beq.n	8005868 <sbrk_aligned+0x34>
 8005852:	1cc4      	adds	r4, r0, #3
 8005854:	f024 0403 	bic.w	r4, r4, #3
 8005858:	42a0      	cmp	r0, r4
 800585a:	d007      	beq.n	800586c <sbrk_aligned+0x38>
 800585c:	1a21      	subs	r1, r4, r0
 800585e:	4628      	mov	r0, r5
 8005860:	f000 fb9a 	bl	8005f98 <_sbrk_r>
 8005864:	3001      	adds	r0, #1
 8005866:	d101      	bne.n	800586c <sbrk_aligned+0x38>
 8005868:	f04f 34ff 	mov.w	r4, #4294967295
 800586c:	4620      	mov	r0, r4
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	20000b34 	.word	0x20000b34

08005874 <_malloc_r>:
 8005874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005878:	1ccd      	adds	r5, r1, #3
 800587a:	f025 0503 	bic.w	r5, r5, #3
 800587e:	3508      	adds	r5, #8
 8005880:	2d0c      	cmp	r5, #12
 8005882:	bf38      	it	cc
 8005884:	250c      	movcc	r5, #12
 8005886:	2d00      	cmp	r5, #0
 8005888:	4607      	mov	r7, r0
 800588a:	db01      	blt.n	8005890 <_malloc_r+0x1c>
 800588c:	42a9      	cmp	r1, r5
 800588e:	d905      	bls.n	800589c <_malloc_r+0x28>
 8005890:	230c      	movs	r3, #12
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	2600      	movs	r6, #0
 8005896:	4630      	mov	r0, r6
 8005898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800589c:	4e2e      	ldr	r6, [pc, #184]	; (8005958 <_malloc_r+0xe4>)
 800589e:	f000 fba5 	bl	8005fec <__malloc_lock>
 80058a2:	6833      	ldr	r3, [r6, #0]
 80058a4:	461c      	mov	r4, r3
 80058a6:	bb34      	cbnz	r4, 80058f6 <_malloc_r+0x82>
 80058a8:	4629      	mov	r1, r5
 80058aa:	4638      	mov	r0, r7
 80058ac:	f7ff ffc2 	bl	8005834 <sbrk_aligned>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	4604      	mov	r4, r0
 80058b4:	d14d      	bne.n	8005952 <_malloc_r+0xde>
 80058b6:	6834      	ldr	r4, [r6, #0]
 80058b8:	4626      	mov	r6, r4
 80058ba:	2e00      	cmp	r6, #0
 80058bc:	d140      	bne.n	8005940 <_malloc_r+0xcc>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	4631      	mov	r1, r6
 80058c2:	4638      	mov	r0, r7
 80058c4:	eb04 0803 	add.w	r8, r4, r3
 80058c8:	f000 fb66 	bl	8005f98 <_sbrk_r>
 80058cc:	4580      	cmp	r8, r0
 80058ce:	d13a      	bne.n	8005946 <_malloc_r+0xd2>
 80058d0:	6821      	ldr	r1, [r4, #0]
 80058d2:	3503      	adds	r5, #3
 80058d4:	1a6d      	subs	r5, r5, r1
 80058d6:	f025 0503 	bic.w	r5, r5, #3
 80058da:	3508      	adds	r5, #8
 80058dc:	2d0c      	cmp	r5, #12
 80058de:	bf38      	it	cc
 80058e0:	250c      	movcc	r5, #12
 80058e2:	4629      	mov	r1, r5
 80058e4:	4638      	mov	r0, r7
 80058e6:	f7ff ffa5 	bl	8005834 <sbrk_aligned>
 80058ea:	3001      	adds	r0, #1
 80058ec:	d02b      	beq.n	8005946 <_malloc_r+0xd2>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	442b      	add	r3, r5
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	e00e      	b.n	8005914 <_malloc_r+0xa0>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	1b52      	subs	r2, r2, r5
 80058fa:	d41e      	bmi.n	800593a <_malloc_r+0xc6>
 80058fc:	2a0b      	cmp	r2, #11
 80058fe:	d916      	bls.n	800592e <_malloc_r+0xba>
 8005900:	1961      	adds	r1, r4, r5
 8005902:	42a3      	cmp	r3, r4
 8005904:	6025      	str	r5, [r4, #0]
 8005906:	bf18      	it	ne
 8005908:	6059      	strne	r1, [r3, #4]
 800590a:	6863      	ldr	r3, [r4, #4]
 800590c:	bf08      	it	eq
 800590e:	6031      	streq	r1, [r6, #0]
 8005910:	5162      	str	r2, [r4, r5]
 8005912:	604b      	str	r3, [r1, #4]
 8005914:	4638      	mov	r0, r7
 8005916:	f104 060b 	add.w	r6, r4, #11
 800591a:	f000 fb6d 	bl	8005ff8 <__malloc_unlock>
 800591e:	f026 0607 	bic.w	r6, r6, #7
 8005922:	1d23      	adds	r3, r4, #4
 8005924:	1af2      	subs	r2, r6, r3
 8005926:	d0b6      	beq.n	8005896 <_malloc_r+0x22>
 8005928:	1b9b      	subs	r3, r3, r6
 800592a:	50a3      	str	r3, [r4, r2]
 800592c:	e7b3      	b.n	8005896 <_malloc_r+0x22>
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	42a3      	cmp	r3, r4
 8005932:	bf0c      	ite	eq
 8005934:	6032      	streq	r2, [r6, #0]
 8005936:	605a      	strne	r2, [r3, #4]
 8005938:	e7ec      	b.n	8005914 <_malloc_r+0xa0>
 800593a:	4623      	mov	r3, r4
 800593c:	6864      	ldr	r4, [r4, #4]
 800593e:	e7b2      	b.n	80058a6 <_malloc_r+0x32>
 8005940:	4634      	mov	r4, r6
 8005942:	6876      	ldr	r6, [r6, #4]
 8005944:	e7b9      	b.n	80058ba <_malloc_r+0x46>
 8005946:	230c      	movs	r3, #12
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	4638      	mov	r0, r7
 800594c:	f000 fb54 	bl	8005ff8 <__malloc_unlock>
 8005950:	e7a1      	b.n	8005896 <_malloc_r+0x22>
 8005952:	6025      	str	r5, [r4, #0]
 8005954:	e7de      	b.n	8005914 <_malloc_r+0xa0>
 8005956:	bf00      	nop
 8005958:	20000b30 	.word	0x20000b30

0800595c <_realloc_r>:
 800595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005960:	4680      	mov	r8, r0
 8005962:	4614      	mov	r4, r2
 8005964:	460e      	mov	r6, r1
 8005966:	b921      	cbnz	r1, 8005972 <_realloc_r+0x16>
 8005968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800596c:	4611      	mov	r1, r2
 800596e:	f7ff bf81 	b.w	8005874 <_malloc_r>
 8005972:	b92a      	cbnz	r2, 8005980 <_realloc_r+0x24>
 8005974:	f000 fb46 	bl	8006004 <_free_r>
 8005978:	4625      	mov	r5, r4
 800597a:	4628      	mov	r0, r5
 800597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005980:	f000 fb8c 	bl	800609c <_malloc_usable_size_r>
 8005984:	4284      	cmp	r4, r0
 8005986:	4607      	mov	r7, r0
 8005988:	d802      	bhi.n	8005990 <_realloc_r+0x34>
 800598a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800598e:	d812      	bhi.n	80059b6 <_realloc_r+0x5a>
 8005990:	4621      	mov	r1, r4
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff ff6e 	bl	8005874 <_malloc_r>
 8005998:	4605      	mov	r5, r0
 800599a:	2800      	cmp	r0, #0
 800599c:	d0ed      	beq.n	800597a <_realloc_r+0x1e>
 800599e:	42bc      	cmp	r4, r7
 80059a0:	4622      	mov	r2, r4
 80059a2:	4631      	mov	r1, r6
 80059a4:	bf28      	it	cs
 80059a6:	463a      	movcs	r2, r7
 80059a8:	f7ff fec2 	bl	8005730 <memcpy>
 80059ac:	4631      	mov	r1, r6
 80059ae:	4640      	mov	r0, r8
 80059b0:	f000 fb28 	bl	8006004 <_free_r>
 80059b4:	e7e1      	b.n	800597a <_realloc_r+0x1e>
 80059b6:	4635      	mov	r5, r6
 80059b8:	e7df      	b.n	800597a <_realloc_r+0x1e>

080059ba <__ssputs_r>:
 80059ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059be:	688e      	ldr	r6, [r1, #8]
 80059c0:	429e      	cmp	r6, r3
 80059c2:	4682      	mov	sl, r0
 80059c4:	460c      	mov	r4, r1
 80059c6:	4690      	mov	r8, r2
 80059c8:	461f      	mov	r7, r3
 80059ca:	d838      	bhi.n	8005a3e <__ssputs_r+0x84>
 80059cc:	898a      	ldrh	r2, [r1, #12]
 80059ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059d2:	d032      	beq.n	8005a3a <__ssputs_r+0x80>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	6909      	ldr	r1, [r1, #16]
 80059d8:	eba5 0901 	sub.w	r9, r5, r1
 80059dc:	6965      	ldr	r5, [r4, #20]
 80059de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059e6:	3301      	adds	r3, #1
 80059e8:	444b      	add	r3, r9
 80059ea:	106d      	asrs	r5, r5, #1
 80059ec:	429d      	cmp	r5, r3
 80059ee:	bf38      	it	cc
 80059f0:	461d      	movcc	r5, r3
 80059f2:	0553      	lsls	r3, r2, #21
 80059f4:	d531      	bpl.n	8005a5a <__ssputs_r+0xa0>
 80059f6:	4629      	mov	r1, r5
 80059f8:	f7ff ff3c 	bl	8005874 <_malloc_r>
 80059fc:	4606      	mov	r6, r0
 80059fe:	b950      	cbnz	r0, 8005a16 <__ssputs_r+0x5c>
 8005a00:	230c      	movs	r3, #12
 8005a02:	f8ca 3000 	str.w	r3, [sl]
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a16:	6921      	ldr	r1, [r4, #16]
 8005a18:	464a      	mov	r2, r9
 8005a1a:	f7ff fe89 	bl	8005730 <memcpy>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	6126      	str	r6, [r4, #16]
 8005a2c:	6165      	str	r5, [r4, #20]
 8005a2e:	444e      	add	r6, r9
 8005a30:	eba5 0509 	sub.w	r5, r5, r9
 8005a34:	6026      	str	r6, [r4, #0]
 8005a36:	60a5      	str	r5, [r4, #8]
 8005a38:	463e      	mov	r6, r7
 8005a3a:	42be      	cmp	r6, r7
 8005a3c:	d900      	bls.n	8005a40 <__ssputs_r+0x86>
 8005a3e:	463e      	mov	r6, r7
 8005a40:	6820      	ldr	r0, [r4, #0]
 8005a42:	4632      	mov	r2, r6
 8005a44:	4641      	mov	r1, r8
 8005a46:	f000 fab7 	bl	8005fb8 <memmove>
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	1b9b      	subs	r3, r3, r6
 8005a4e:	60a3      	str	r3, [r4, #8]
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	4433      	add	r3, r6
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	2000      	movs	r0, #0
 8005a58:	e7db      	b.n	8005a12 <__ssputs_r+0x58>
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	f7ff ff7e 	bl	800595c <_realloc_r>
 8005a60:	4606      	mov	r6, r0
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d1e1      	bne.n	8005a2a <__ssputs_r+0x70>
 8005a66:	6921      	ldr	r1, [r4, #16]
 8005a68:	4650      	mov	r0, sl
 8005a6a:	f000 facb 	bl	8006004 <_free_r>
 8005a6e:	e7c7      	b.n	8005a00 <__ssputs_r+0x46>

08005a70 <_svfiprintf_r>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	4698      	mov	r8, r3
 8005a76:	898b      	ldrh	r3, [r1, #12]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	b09d      	sub	sp, #116	; 0x74
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	460d      	mov	r5, r1
 8005a80:	4614      	mov	r4, r2
 8005a82:	d50e      	bpl.n	8005aa2 <_svfiprintf_r+0x32>
 8005a84:	690b      	ldr	r3, [r1, #16]
 8005a86:	b963      	cbnz	r3, 8005aa2 <_svfiprintf_r+0x32>
 8005a88:	2140      	movs	r1, #64	; 0x40
 8005a8a:	f7ff fef3 	bl	8005874 <_malloc_r>
 8005a8e:	6028      	str	r0, [r5, #0]
 8005a90:	6128      	str	r0, [r5, #16]
 8005a92:	b920      	cbnz	r0, 8005a9e <_svfiprintf_r+0x2e>
 8005a94:	230c      	movs	r3, #12
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e0d1      	b.n	8005c42 <_svfiprintf_r+0x1d2>
 8005a9e:	2340      	movs	r3, #64	; 0x40
 8005aa0:	616b      	str	r3, [r5, #20]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa6:	2320      	movs	r3, #32
 8005aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab0:	2330      	movs	r3, #48	; 0x30
 8005ab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c5c <_svfiprintf_r+0x1ec>
 8005ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aba:	f04f 0901 	mov.w	r9, #1
 8005abe:	4623      	mov	r3, r4
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac6:	b10a      	cbz	r2, 8005acc <_svfiprintf_r+0x5c>
 8005ac8:	2a25      	cmp	r2, #37	; 0x25
 8005aca:	d1f9      	bne.n	8005ac0 <_svfiprintf_r+0x50>
 8005acc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad0:	d00b      	beq.n	8005aea <_svfiprintf_r+0x7a>
 8005ad2:	465b      	mov	r3, fp
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f7ff ff6e 	bl	80059ba <__ssputs_r>
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f000 80aa 	beq.w	8005c38 <_svfiprintf_r+0x1c8>
 8005ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae6:	445a      	add	r2, fp
 8005ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aea:	f89a 3000 	ldrb.w	r3, [sl]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80a2 	beq.w	8005c38 <_svfiprintf_r+0x1c8>
 8005af4:	2300      	movs	r3, #0
 8005af6:	f04f 32ff 	mov.w	r2, #4294967295
 8005afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005afe:	f10a 0a01 	add.w	sl, sl, #1
 8005b02:	9304      	str	r3, [sp, #16]
 8005b04:	9307      	str	r3, [sp, #28]
 8005b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0c:	4654      	mov	r4, sl
 8005b0e:	2205      	movs	r2, #5
 8005b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b14:	4851      	ldr	r0, [pc, #324]	; (8005c5c <_svfiprintf_r+0x1ec>)
 8005b16:	f7fa fb83 	bl	8000220 <memchr>
 8005b1a:	9a04      	ldr	r2, [sp, #16]
 8005b1c:	b9d8      	cbnz	r0, 8005b56 <_svfiprintf_r+0xe6>
 8005b1e:	06d0      	lsls	r0, r2, #27
 8005b20:	bf44      	itt	mi
 8005b22:	2320      	movmi	r3, #32
 8005b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b28:	0711      	lsls	r1, r2, #28
 8005b2a:	bf44      	itt	mi
 8005b2c:	232b      	movmi	r3, #43	; 0x2b
 8005b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b32:	f89a 3000 	ldrb.w	r3, [sl]
 8005b36:	2b2a      	cmp	r3, #42	; 0x2a
 8005b38:	d015      	beq.n	8005b66 <_svfiprintf_r+0xf6>
 8005b3a:	9a07      	ldr	r2, [sp, #28]
 8005b3c:	4654      	mov	r4, sl
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f04f 0c0a 	mov.w	ip, #10
 8005b44:	4621      	mov	r1, r4
 8005b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4a:	3b30      	subs	r3, #48	; 0x30
 8005b4c:	2b09      	cmp	r3, #9
 8005b4e:	d94e      	bls.n	8005bee <_svfiprintf_r+0x17e>
 8005b50:	b1b0      	cbz	r0, 8005b80 <_svfiprintf_r+0x110>
 8005b52:	9207      	str	r2, [sp, #28]
 8005b54:	e014      	b.n	8005b80 <_svfiprintf_r+0x110>
 8005b56:	eba0 0308 	sub.w	r3, r0, r8
 8005b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	46a2      	mov	sl, r4
 8005b64:	e7d2      	b.n	8005b0c <_svfiprintf_r+0x9c>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	1d19      	adds	r1, r3, #4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	9103      	str	r1, [sp, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfbb      	ittet	lt
 8005b72:	425b      	neglt	r3, r3
 8005b74:	f042 0202 	orrlt.w	r2, r2, #2
 8005b78:	9307      	strge	r3, [sp, #28]
 8005b7a:	9307      	strlt	r3, [sp, #28]
 8005b7c:	bfb8      	it	lt
 8005b7e:	9204      	strlt	r2, [sp, #16]
 8005b80:	7823      	ldrb	r3, [r4, #0]
 8005b82:	2b2e      	cmp	r3, #46	; 0x2e
 8005b84:	d10c      	bne.n	8005ba0 <_svfiprintf_r+0x130>
 8005b86:	7863      	ldrb	r3, [r4, #1]
 8005b88:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8a:	d135      	bne.n	8005bf8 <_svfiprintf_r+0x188>
 8005b8c:	9b03      	ldr	r3, [sp, #12]
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	9203      	str	r2, [sp, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bfb8      	it	lt
 8005b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b9c:	3402      	adds	r4, #2
 8005b9e:	9305      	str	r3, [sp, #20]
 8005ba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c6c <_svfiprintf_r+0x1fc>
 8005ba4:	7821      	ldrb	r1, [r4, #0]
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	4650      	mov	r0, sl
 8005baa:	f7fa fb39 	bl	8000220 <memchr>
 8005bae:	b140      	cbz	r0, 8005bc2 <_svfiprintf_r+0x152>
 8005bb0:	2340      	movs	r3, #64	; 0x40
 8005bb2:	eba0 000a 	sub.w	r0, r0, sl
 8005bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	4303      	orrs	r3, r0
 8005bbe:	3401      	adds	r4, #1
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc6:	4826      	ldr	r0, [pc, #152]	; (8005c60 <_svfiprintf_r+0x1f0>)
 8005bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bcc:	2206      	movs	r2, #6
 8005bce:	f7fa fb27 	bl	8000220 <memchr>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d038      	beq.n	8005c48 <_svfiprintf_r+0x1d8>
 8005bd6:	4b23      	ldr	r3, [pc, #140]	; (8005c64 <_svfiprintf_r+0x1f4>)
 8005bd8:	bb1b      	cbnz	r3, 8005c22 <_svfiprintf_r+0x1b2>
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	3307      	adds	r3, #7
 8005bde:	f023 0307 	bic.w	r3, r3, #7
 8005be2:	3308      	adds	r3, #8
 8005be4:	9303      	str	r3, [sp, #12]
 8005be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be8:	4433      	add	r3, r6
 8005bea:	9309      	str	r3, [sp, #36]	; 0x24
 8005bec:	e767      	b.n	8005abe <_svfiprintf_r+0x4e>
 8005bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e7a5      	b.n	8005b44 <_svfiprintf_r+0xd4>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	3401      	adds	r4, #1
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f04f 0c0a 	mov.w	ip, #10
 8005c04:	4620      	mov	r0, r4
 8005c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c0a:	3a30      	subs	r2, #48	; 0x30
 8005c0c:	2a09      	cmp	r2, #9
 8005c0e:	d903      	bls.n	8005c18 <_svfiprintf_r+0x1a8>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0c5      	beq.n	8005ba0 <_svfiprintf_r+0x130>
 8005c14:	9105      	str	r1, [sp, #20]
 8005c16:	e7c3      	b.n	8005ba0 <_svfiprintf_r+0x130>
 8005c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7f0      	b.n	8005c04 <_svfiprintf_r+0x194>
 8005c22:	ab03      	add	r3, sp, #12
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	462a      	mov	r2, r5
 8005c28:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <_svfiprintf_r+0x1f8>)
 8005c2a:	a904      	add	r1, sp, #16
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f3af 8000 	nop.w
 8005c32:	1c42      	adds	r2, r0, #1
 8005c34:	4606      	mov	r6, r0
 8005c36:	d1d6      	bne.n	8005be6 <_svfiprintf_r+0x176>
 8005c38:	89ab      	ldrh	r3, [r5, #12]
 8005c3a:	065b      	lsls	r3, r3, #25
 8005c3c:	f53f af2c 	bmi.w	8005a98 <_svfiprintf_r+0x28>
 8005c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c42:	b01d      	add	sp, #116	; 0x74
 8005c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c48:	ab03      	add	r3, sp, #12
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <_svfiprintf_r+0x1f8>)
 8005c50:	a904      	add	r1, sp, #16
 8005c52:	4638      	mov	r0, r7
 8005c54:	f000 f87a 	bl	8005d4c <_printf_i>
 8005c58:	e7eb      	b.n	8005c32 <_svfiprintf_r+0x1c2>
 8005c5a:	bf00      	nop
 8005c5c:	08006328 	.word	0x08006328
 8005c60:	08006332 	.word	0x08006332
 8005c64:	00000000 	.word	0x00000000
 8005c68:	080059bb 	.word	0x080059bb
 8005c6c:	0800632e 	.word	0x0800632e

08005c70 <_printf_common>:
 8005c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	4616      	mov	r6, r2
 8005c76:	4699      	mov	r9, r3
 8005c78:	688a      	ldr	r2, [r1, #8]
 8005c7a:	690b      	ldr	r3, [r1, #16]
 8005c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bfb8      	it	lt
 8005c84:	4613      	movlt	r3, r2
 8005c86:	6033      	str	r3, [r6, #0]
 8005c88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	b10a      	cbz	r2, 8005c96 <_printf_common+0x26>
 8005c92:	3301      	adds	r3, #1
 8005c94:	6033      	str	r3, [r6, #0]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	0699      	lsls	r1, r3, #26
 8005c9a:	bf42      	ittt	mi
 8005c9c:	6833      	ldrmi	r3, [r6, #0]
 8005c9e:	3302      	addmi	r3, #2
 8005ca0:	6033      	strmi	r3, [r6, #0]
 8005ca2:	6825      	ldr	r5, [r4, #0]
 8005ca4:	f015 0506 	ands.w	r5, r5, #6
 8005ca8:	d106      	bne.n	8005cb8 <_printf_common+0x48>
 8005caa:	f104 0a19 	add.w	sl, r4, #25
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	6832      	ldr	r2, [r6, #0]
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	dc26      	bgt.n	8005d06 <_printf_common+0x96>
 8005cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cbc:	1e13      	subs	r3, r2, #0
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	bf18      	it	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	0692      	lsls	r2, r2, #26
 8005cc6:	d42b      	bmi.n	8005d20 <_printf_common+0xb0>
 8005cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ccc:	4649      	mov	r1, r9
 8005cce:	4638      	mov	r0, r7
 8005cd0:	47c0      	blx	r8
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d01e      	beq.n	8005d14 <_printf_common+0xa4>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	68e5      	ldr	r5, [r4, #12]
 8005cda:	6832      	ldr	r2, [r6, #0]
 8005cdc:	f003 0306 	and.w	r3, r3, #6
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	bf08      	it	eq
 8005ce4:	1aad      	subeq	r5, r5, r2
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	6922      	ldr	r2, [r4, #16]
 8005cea:	bf0c      	ite	eq
 8005cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf0:	2500      	movne	r5, #0
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	bfc4      	itt	gt
 8005cf6:	1a9b      	subgt	r3, r3, r2
 8005cf8:	18ed      	addgt	r5, r5, r3
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	341a      	adds	r4, #26
 8005cfe:	42b5      	cmp	r5, r6
 8005d00:	d11a      	bne.n	8005d38 <_printf_common+0xc8>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e008      	b.n	8005d18 <_printf_common+0xa8>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	47c0      	blx	r8
 8005d10:	3001      	adds	r0, #1
 8005d12:	d103      	bne.n	8005d1c <_printf_common+0xac>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	e7c6      	b.n	8005cae <_printf_common+0x3e>
 8005d20:	18e1      	adds	r1, r4, r3
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	2030      	movs	r0, #48	; 0x30
 8005d26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d2a:	4422      	add	r2, r4
 8005d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d34:	3302      	adds	r3, #2
 8005d36:	e7c7      	b.n	8005cc8 <_printf_common+0x58>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c0      	blx	r8
 8005d42:	3001      	adds	r0, #1
 8005d44:	d0e6      	beq.n	8005d14 <_printf_common+0xa4>
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7d9      	b.n	8005cfe <_printf_common+0x8e>
	...

08005d4c <_printf_i>:
 8005d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	7e0f      	ldrb	r7, [r1, #24]
 8005d52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d54:	2f78      	cmp	r7, #120	; 0x78
 8005d56:	4691      	mov	r9, r2
 8005d58:	4680      	mov	r8, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	469a      	mov	sl, r3
 8005d5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d62:	d807      	bhi.n	8005d74 <_printf_i+0x28>
 8005d64:	2f62      	cmp	r7, #98	; 0x62
 8005d66:	d80a      	bhi.n	8005d7e <_printf_i+0x32>
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	f000 80d8 	beq.w	8005f1e <_printf_i+0x1d2>
 8005d6e:	2f58      	cmp	r7, #88	; 0x58
 8005d70:	f000 80a3 	beq.w	8005eba <_printf_i+0x16e>
 8005d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d7c:	e03a      	b.n	8005df4 <_printf_i+0xa8>
 8005d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d82:	2b15      	cmp	r3, #21
 8005d84:	d8f6      	bhi.n	8005d74 <_printf_i+0x28>
 8005d86:	a101      	add	r1, pc, #4	; (adr r1, 8005d8c <_printf_i+0x40>)
 8005d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005d75 	.word	0x08005d75
 8005d98:	08005d75 	.word	0x08005d75
 8005d9c:	08005d75 	.word	0x08005d75
 8005da0:	08005d75 	.word	0x08005d75
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d75 	.word	0x08005d75
 8005dac:	08005d75 	.word	0x08005d75
 8005db0:	08005d75 	.word	0x08005d75
 8005db4:	08005d75 	.word	0x08005d75
 8005db8:	08005f05 	.word	0x08005f05
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005ee7 	.word	0x08005ee7
 8005dc4:	08005d75 	.word	0x08005d75
 8005dc8:	08005d75 	.word	0x08005d75
 8005dcc:	08005f27 	.word	0x08005f27
 8005dd0:	08005d75 	.word	0x08005d75
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005d75 	.word	0x08005d75
 8005ddc:	08005d75 	.word	0x08005d75
 8005de0:	08005eef 	.word	0x08005eef
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	602a      	str	r2, [r5, #0]
 8005dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0a3      	b.n	8005f40 <_printf_i+0x1f4>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	6829      	ldr	r1, [r5, #0]
 8005dfc:	0606      	lsls	r6, r0, #24
 8005dfe:	f101 0304 	add.w	r3, r1, #4
 8005e02:	d50a      	bpl.n	8005e1a <_printf_i+0xce>
 8005e04:	680e      	ldr	r6, [r1, #0]
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	2e00      	cmp	r6, #0
 8005e0a:	da03      	bge.n	8005e14 <_printf_i+0xc8>
 8005e0c:	232d      	movs	r3, #45	; 0x2d
 8005e0e:	4276      	negs	r6, r6
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e14:	485e      	ldr	r0, [pc, #376]	; (8005f90 <_printf_i+0x244>)
 8005e16:	230a      	movs	r3, #10
 8005e18:	e019      	b.n	8005e4e <_printf_i+0x102>
 8005e1a:	680e      	ldr	r6, [r1, #0]
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e22:	bf18      	it	ne
 8005e24:	b236      	sxthne	r6, r6
 8005e26:	e7ef      	b.n	8005e08 <_printf_i+0xbc>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	6820      	ldr	r0, [r4, #0]
 8005e2c:	1d19      	adds	r1, r3, #4
 8005e2e:	6029      	str	r1, [r5, #0]
 8005e30:	0601      	lsls	r1, r0, #24
 8005e32:	d501      	bpl.n	8005e38 <_printf_i+0xec>
 8005e34:	681e      	ldr	r6, [r3, #0]
 8005e36:	e002      	b.n	8005e3e <_printf_i+0xf2>
 8005e38:	0646      	lsls	r6, r0, #25
 8005e3a:	d5fb      	bpl.n	8005e34 <_printf_i+0xe8>
 8005e3c:	881e      	ldrh	r6, [r3, #0]
 8005e3e:	4854      	ldr	r0, [pc, #336]	; (8005f90 <_printf_i+0x244>)
 8005e40:	2f6f      	cmp	r7, #111	; 0x6f
 8005e42:	bf0c      	ite	eq
 8005e44:	2308      	moveq	r3, #8
 8005e46:	230a      	movne	r3, #10
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e4e:	6865      	ldr	r5, [r4, #4]
 8005e50:	60a5      	str	r5, [r4, #8]
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	bfa2      	ittt	ge
 8005e56:	6821      	ldrge	r1, [r4, #0]
 8005e58:	f021 0104 	bicge.w	r1, r1, #4
 8005e5c:	6021      	strge	r1, [r4, #0]
 8005e5e:	b90e      	cbnz	r6, 8005e64 <_printf_i+0x118>
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	d04d      	beq.n	8005f00 <_printf_i+0x1b4>
 8005e64:	4615      	mov	r5, r2
 8005e66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e6e:	5dc7      	ldrb	r7, [r0, r7]
 8005e70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e74:	4637      	mov	r7, r6
 8005e76:	42bb      	cmp	r3, r7
 8005e78:	460e      	mov	r6, r1
 8005e7a:	d9f4      	bls.n	8005e66 <_printf_i+0x11a>
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d10b      	bne.n	8005e98 <_printf_i+0x14c>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	07de      	lsls	r6, r3, #31
 8005e84:	d508      	bpl.n	8005e98 <_printf_i+0x14c>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	6861      	ldr	r1, [r4, #4]
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	bfde      	ittt	le
 8005e8e:	2330      	movle	r3, #48	; 0x30
 8005e90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e98:	1b52      	subs	r2, r2, r5
 8005e9a:	6122      	str	r2, [r4, #16]
 8005e9c:	f8cd a000 	str.w	sl, [sp]
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	aa03      	add	r2, sp, #12
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f7ff fee2 	bl	8005c70 <_printf_common>
 8005eac:	3001      	adds	r0, #1
 8005eae:	d14c      	bne.n	8005f4a <_printf_i+0x1fe>
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	b004      	add	sp, #16
 8005eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eba:	4835      	ldr	r0, [pc, #212]	; (8005f90 <_printf_i+0x244>)
 8005ebc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ec0:	6829      	ldr	r1, [r5, #0]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ec8:	6029      	str	r1, [r5, #0]
 8005eca:	061d      	lsls	r5, r3, #24
 8005ecc:	d514      	bpl.n	8005ef8 <_printf_i+0x1ac>
 8005ece:	07df      	lsls	r7, r3, #31
 8005ed0:	bf44      	itt	mi
 8005ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed6:	6023      	strmi	r3, [r4, #0]
 8005ed8:	b91e      	cbnz	r6, 8005ee2 <_printf_i+0x196>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f023 0320 	bic.w	r3, r3, #32
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	e7b0      	b.n	8005e48 <_printf_i+0xfc>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f043 0320 	orr.w	r3, r3, #32
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	2378      	movs	r3, #120	; 0x78
 8005ef0:	4828      	ldr	r0, [pc, #160]	; (8005f94 <_printf_i+0x248>)
 8005ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ef6:	e7e3      	b.n	8005ec0 <_printf_i+0x174>
 8005ef8:	0659      	lsls	r1, r3, #25
 8005efa:	bf48      	it	mi
 8005efc:	b2b6      	uxthmi	r6, r6
 8005efe:	e7e6      	b.n	8005ece <_printf_i+0x182>
 8005f00:	4615      	mov	r5, r2
 8005f02:	e7bb      	b.n	8005e7c <_printf_i+0x130>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	6826      	ldr	r6, [r4, #0]
 8005f08:	6961      	ldr	r1, [r4, #20]
 8005f0a:	1d18      	adds	r0, r3, #4
 8005f0c:	6028      	str	r0, [r5, #0]
 8005f0e:	0635      	lsls	r5, r6, #24
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	d501      	bpl.n	8005f18 <_printf_i+0x1cc>
 8005f14:	6019      	str	r1, [r3, #0]
 8005f16:	e002      	b.n	8005f1e <_printf_i+0x1d2>
 8005f18:	0670      	lsls	r0, r6, #25
 8005f1a:	d5fb      	bpl.n	8005f14 <_printf_i+0x1c8>
 8005f1c:	8019      	strh	r1, [r3, #0]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	4615      	mov	r5, r2
 8005f24:	e7ba      	b.n	8005e9c <_printf_i+0x150>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	1d1a      	adds	r2, r3, #4
 8005f2a:	602a      	str	r2, [r5, #0]
 8005f2c:	681d      	ldr	r5, [r3, #0]
 8005f2e:	6862      	ldr	r2, [r4, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	4628      	mov	r0, r5
 8005f34:	f7fa f974 	bl	8000220 <memchr>
 8005f38:	b108      	cbz	r0, 8005f3e <_printf_i+0x1f2>
 8005f3a:	1b40      	subs	r0, r0, r5
 8005f3c:	6060      	str	r0, [r4, #4]
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	2300      	movs	r3, #0
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f48:	e7a8      	b.n	8005e9c <_printf_i+0x150>
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d0ab      	beq.n	8005eb0 <_printf_i+0x164>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	079b      	lsls	r3, r3, #30
 8005f5c:	d413      	bmi.n	8005f86 <_printf_i+0x23a>
 8005f5e:	68e0      	ldr	r0, [r4, #12]
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	4298      	cmp	r0, r3
 8005f64:	bfb8      	it	lt
 8005f66:	4618      	movlt	r0, r3
 8005f68:	e7a4      	b.n	8005eb4 <_printf_i+0x168>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	47d0      	blx	sl
 8005f74:	3001      	adds	r0, #1
 8005f76:	d09b      	beq.n	8005eb0 <_printf_i+0x164>
 8005f78:	3501      	adds	r5, #1
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	9903      	ldr	r1, [sp, #12]
 8005f7e:	1a5b      	subs	r3, r3, r1
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dcf2      	bgt.n	8005f6a <_printf_i+0x21e>
 8005f84:	e7eb      	b.n	8005f5e <_printf_i+0x212>
 8005f86:	2500      	movs	r5, #0
 8005f88:	f104 0619 	add.w	r6, r4, #25
 8005f8c:	e7f5      	b.n	8005f7a <_printf_i+0x22e>
 8005f8e:	bf00      	nop
 8005f90:	08006339 	.word	0x08006339
 8005f94:	0800634a 	.word	0x0800634a

08005f98 <_sbrk_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d06      	ldr	r5, [pc, #24]	; (8005fb4 <_sbrk_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fc fb8e 	bl	80026c4 <_sbrk>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_sbrk_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_sbrk_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20000b38 	.word	0x20000b38

08005fb8 <memmove>:
 8005fb8:	4288      	cmp	r0, r1
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	eb01 0402 	add.w	r4, r1, r2
 8005fc0:	d902      	bls.n	8005fc8 <memmove+0x10>
 8005fc2:	4284      	cmp	r4, r0
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	d807      	bhi.n	8005fd8 <memmove+0x20>
 8005fc8:	1e43      	subs	r3, r0, #1
 8005fca:	42a1      	cmp	r1, r4
 8005fcc:	d008      	beq.n	8005fe0 <memmove+0x28>
 8005fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd6:	e7f8      	b.n	8005fca <memmove+0x12>
 8005fd8:	4402      	add	r2, r0
 8005fda:	4601      	mov	r1, r0
 8005fdc:	428a      	cmp	r2, r1
 8005fde:	d100      	bne.n	8005fe2 <memmove+0x2a>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fea:	e7f7      	b.n	8005fdc <memmove+0x24>

08005fec <__malloc_lock>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__malloc_lock+0x8>)
 8005fee:	f000 b85d 	b.w	80060ac <__retarget_lock_acquire_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	20000b3c 	.word	0x20000b3c

08005ff8 <__malloc_unlock>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__malloc_unlock+0x8>)
 8005ffa:	f000 b858 	b.w	80060ae <__retarget_lock_release_recursive>
 8005ffe:	bf00      	nop
 8006000:	20000b3c 	.word	0x20000b3c

08006004 <_free_r>:
 8006004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006006:	2900      	cmp	r1, #0
 8006008:	d044      	beq.n	8006094 <_free_r+0x90>
 800600a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600e:	9001      	str	r0, [sp, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f1a1 0404 	sub.w	r4, r1, #4
 8006016:	bfb8      	it	lt
 8006018:	18e4      	addlt	r4, r4, r3
 800601a:	f7ff ffe7 	bl	8005fec <__malloc_lock>
 800601e:	4a1e      	ldr	r2, [pc, #120]	; (8006098 <_free_r+0x94>)
 8006020:	9801      	ldr	r0, [sp, #4]
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	b933      	cbnz	r3, 8006034 <_free_r+0x30>
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	6014      	str	r4, [r2, #0]
 800602a:	b003      	add	sp, #12
 800602c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006030:	f7ff bfe2 	b.w	8005ff8 <__malloc_unlock>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d908      	bls.n	800604a <_free_r+0x46>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf01      	itttt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	1949      	addeq	r1, r1, r5
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	e7ed      	b.n	8006026 <_free_r+0x22>
 800604a:	461a      	mov	r2, r3
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	b10b      	cbz	r3, 8006054 <_free_r+0x50>
 8006050:	42a3      	cmp	r3, r4
 8006052:	d9fa      	bls.n	800604a <_free_r+0x46>
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	1855      	adds	r5, r2, r1
 8006058:	42a5      	cmp	r5, r4
 800605a:	d10b      	bne.n	8006074 <_free_r+0x70>
 800605c:	6824      	ldr	r4, [r4, #0]
 800605e:	4421      	add	r1, r4
 8006060:	1854      	adds	r4, r2, r1
 8006062:	42a3      	cmp	r3, r4
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	d1e0      	bne.n	800602a <_free_r+0x26>
 8006068:	681c      	ldr	r4, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	6053      	str	r3, [r2, #4]
 800606e:	4421      	add	r1, r4
 8006070:	6011      	str	r1, [r2, #0]
 8006072:	e7da      	b.n	800602a <_free_r+0x26>
 8006074:	d902      	bls.n	800607c <_free_r+0x78>
 8006076:	230c      	movs	r3, #12
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	e7d6      	b.n	800602a <_free_r+0x26>
 800607c:	6825      	ldr	r5, [r4, #0]
 800607e:	1961      	adds	r1, r4, r5
 8006080:	428b      	cmp	r3, r1
 8006082:	bf04      	itt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	6063      	str	r3, [r4, #4]
 800608a:	bf04      	itt	eq
 800608c:	1949      	addeq	r1, r1, r5
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	6054      	str	r4, [r2, #4]
 8006092:	e7ca      	b.n	800602a <_free_r+0x26>
 8006094:	b003      	add	sp, #12
 8006096:	bd30      	pop	{r4, r5, pc}
 8006098:	20000b30 	.word	0x20000b30

0800609c <_malloc_usable_size_r>:
 800609c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a0:	1f18      	subs	r0, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bfbc      	itt	lt
 80060a6:	580b      	ldrlt	r3, [r1, r0]
 80060a8:	18c0      	addlt	r0, r0, r3
 80060aa:	4770      	bx	lr

080060ac <__retarget_lock_acquire_recursive>:
 80060ac:	4770      	bx	lr

080060ae <__retarget_lock_release_recursive>:
 80060ae:	4770      	bx	lr

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
